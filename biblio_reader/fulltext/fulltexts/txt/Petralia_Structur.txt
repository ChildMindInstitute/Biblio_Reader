Structured Bayesian Learning Through Mixture
Models
by

Francesca Petralia
Department of Statistical Science
Duke University
Date:
Approved:

David B. Dunson, Supervisor

David L. Banks

Surya T. Tokdar

Joseph Lucas

Dissertation submitted in partial fulfillment of the requirements for the degree of
Doctor of Philosophy in the Department of Statistical Science
in the Graduate School of Duke University
2013

Abstract
Structured Bayesian Learning Through Mixture Models
by

Francesca Petralia
Department of Statistical Science
Duke University
Date:
Approved:

David B. Dunson, Supervisor

David L. Banks

Surya T. Tokdar

Joseph Lucas

An abstract of a dissertation submitted in partial fulfillment of the requirements for
the degree of Doctor of Philosophy in the Department of Statistical Science
in the Graduate School of Duke University
2013

Copyright c 2013 by Francesca Petralia
All rights reserved except the rights granted by the
Creative Commons Attribution-Noncommercial Licence

Abstract
In this thesis, we develop some Bayesian mixture density estimation for univariate and multivariate data. We start proposing a repulsive process favoring mixture components further apart. While conducting inferences on the cluster-specific
parameters, current frequentist and Bayesian methods often encounter problems
when clusters are placed too close together to be scientifically meaningful. Current Bayesian practice generates component-specific parameters independently from
a common prior, which tends to favor similar components and often leads to substantial probability assigned to redundant components that are not needed to fit
the data. As an alternative, we propose to generate components from a repulsive
process, which leads to fewer, better separated and more interpretable clusters.
In the second part of the thesis, we face the problem of modeling the conditional
distribution of a response variable given a high dimensional vector of predictors
potentially concentrated near a lower dimensional subspace or manifold. In many
settings it is important to allow not only the mean but also the variance and shape of
the response density to change flexibly with features, which are massive-dimensional.
We propose a multiresolution model that scales efficiently to massive numbers of
features, and can be implemented efficiently with slice sampling.
In the third part of the thesis, we deal with the problem of characterizing the
conditional density of a multivariate vector of response given a potentially high dimensional vector of predictors. The proposed model flexibly characterizes the density

iv

of the response variable by hierarchically coupling a collection of factor models, each
one defined on a different scale of resolution. As it is illustrated in Chapter 4, our
proposed method achieves good predictive performance compared to competitive
models while efficiently scaling to high dimensional predictors.

v

to My Parents

vi

Contents
Abstract

iv

List of Tables

x

List of Figures

xiii

List of Abbreviations and Symbols

xvi

Acknowledgements

xviii

1 Introduction

1

1.1

Motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1

1.2

Literature Review . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

1.2.1

Mixture Models . . . . . . . . . . . . . . . . . . . . . . . . . .

5

1.2.2

Divide and Conquer Algorithms and Tree Based Models . . .

8

1.2.3

Factor Model and Mixture of Factor Analyzers . . . . . . . . .

9

Dissertation Outline . . . . . . . . . . . . . . . . . . . . . . . . . . .

11

1.3

2 Repulsive Mixtures
2.1

2.2

13

Bayesian Repulsive Mixture Models . . . . . . . . . . . . . . . . . .

14

2.1.1

Repulsive Densities . . . . . . . . . . . . . . . . . . . . . . . .

14

2.1.2

Theoretical Properties . . . . . . . . . . . . . . . . . . . . . .

16

Posterior Computation and Parameter Calibration . . . . . . . . . . .

19

2.2.1

Posterior Computation . . . . . . . . . . . . . . . . . . . . . .

19

2.2.2

Calibration . . . . . . . . . . . . . . . . . . . . . . . . . . . .

21

vii

2.3

Synthetic Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . .

22

2.4

Real Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

24

3 Dictionary Learning for Conditional Distributions
3.1

3.2

3.3

3.4

Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

31

3.1.1

Model Overview . . . . . . . . . . . . . . . . . . . . . . . . . .

31

3.1.2

Model Specification . . . . . . . . . . . . . . . . . . . . . . . .

32

Estimation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

34

3.2.1

Full Conditionals . . . . . . . . . . . . . . . . . . . . . . . . .

36

3.2.2

Predictions . . . . . . . . . . . . . . . . . . . . . . . . . . . .

37

Simulation Studies . . . . . . . . . . . . . . . . . . . . . . . . . . . .

38

3.3.1

Illustrative Example . . . . . . . . . . . . . . . . . . . . . . .

38

3.3.2

Linear Lower Dimensional Space

. . . . . . . . . . . . . . . .

39

3.3.3

Non-Linear Lower Dimensional Space . . . . . . . . . . . . . .

41

3.3.4

Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

42

Real Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

44

4 Bayesian factor trees
4.1

4.2

4.3

30

52

Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

53

4.1.1

Model Structure . . . . . . . . . . . . . . . . . . . . . . . . . .

53

Estimation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

55

4.2.1

Prior Specification . . . . . . . . . . . . . . . . . . . . . . . .

55

4.2.2

Selection of the Number of Factors . . . . . . . . . . . . . . .

56

4.2.3

Full Conditionals and Gibbs Sampler Steps . . . . . . . . . . .

56

Synthetic Example . . . . . . . . . . . . . . . . . . . . . . . . . . . .

59

4.3.1

Two Dimensional Predictors . . . . . . . . . . . . . . . . . . .

60

4.3.2

Higher Dimensional Predictors . . . . . . . . . . . . . . . . . .

63

viii

4.4

Real Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

64

5 Concluding Remarks and Future Direction

68

A Chapter 2: Theory

71

B

A.1 Cited Theorems and Assumptions . . . . . . . . . . . . . . . . . . . .

71

A.2 Proofs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

72

Chapter 2: Additional Results

78

B.1 Synthetic examples . . . . . . . . . . . . . . . . . . . . . . . . . . . .

78

B.2 Additional results . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

80

Bibliography

83

Biography

91

ix

List of Tables
2.1
2.2

3.1

3.2

Posterior mean and standard deviation of weights, location and scale
parameters under dataset drawn from densities pIa, Ibq . . . . . . . .

25

Mean and standard deviation of K-L divergence, misclassification error
and sum of extra weights resulting from non-repulsive mixture and
repulsive mixture with a maximum number of clusters equal to six
under different synthetic data scenarios. . . . . . . . . . . . . . . . .

26

Linear manifold example 1: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for
sample size 50 and 100 for different simulation scenarios. Variable
time indicates the mean of CPU usage to predict a single point, p is
the dimensionality of the predictor space, n is the sample size and
k indicates 1, 000, i.e. 300k=300,0000. Bold indicates best MSE, 
indicates best CPU time. As shown, MSB outperforms both CART
and Lasso regardless of ambient dimension and sample size. . . . . . .

47

Linear manifold example 2: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for
sample size 50 and 100. Variable time indicates the mean of CPU
usage to predict a single point, p is the dimensionality of the predictor
space, n is the sample size and k indicates 1, 000, i.e. 300k=300,0000.
In this case, given the non-linear relationship between response and
predictors, CART outperforms Lasso. However, our model results in
the lowest mean squared errors. . . . . . . . . . . . . . . . . . . . . .

48

x

3.3

3.4

Non-linear manifold - MFA: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for
sample size 50 and 100 for different simulations sampled from a mixture of factor analyzers. Variable time indicates the mean of CPU
usage to predict a single point, p is the dimensionality of the predictor
space, n is the sample size and k indicates 1, 000, i.e. 300k=300,0000.
Bold indicates best MSE,  indicates best CPU time. As shown, MSB
outperforms both CART and Lasso regardless of ambient dimension
and sample size. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

49

Non-linear manifold - Swissroll and S-Manifold: Mean and standard
deviations of squared errors under multiscale stick-breaking (MSB),
CART and Lasso for sample size 50 and 100 for different simulation
scenarios. Variable time indicates the mean of CPU usage to predict
a single point, p is the dimensionality of the predictor space, n is the
sample size and k indicates 1, 000, i.e. 300k=300,0000. Bold indicates
best MSE,  indicates best CPU time. As shown, MSB outperforms
both CART and Lasso regardless of ambient dimension and sample
size. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

50

3.5

Neuroscience application quantitative performance comparisons. Squared
error predictive accuracy per subject (using leave-one-out) was computed. We report the mean and standard deviation (s.d.) across subjects of squared error, and CPU time (in seconds). We compare multiscale stick-breaking (MSB), CART, Lasso and random forest (RF).
MSB outperforms all the competitors in terms of predictive accuracy
and scalability. Only MSB and Lasso even ran for the  106 dimensional application. Bold indicates best MSE,  indicates best CPU
time. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51

4.1

Two dimensional predictors: Mean and standard deviations of squared
errors under our bayesian factor tree (BFT), a mixture of factor analyzers (MFA) and covariate dependent mixture of factor analyzers
(dMFA) under the first (1) and second (2) simulation scenario. Bold
indicates best MSE. As shown, in almost all data scenarios, BFT leads
to the lowest MSE. . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4.2

62

Higher dimensional predictors: Mean and standard deviations of squared
errors under our bayesian factor tree (BFT), a mixture of factor analyzers (MFA) and covariate dependent mixture of factor analyzers
(dMFA). Bold indicates best MSE. . . . . . . . . . . . . . . . . . . . 65

xi

4.3

Real dataset: Percentiles (2.5%, 50% and 97.5%) of squared errors
under our Bayesian Factor Tree (BFT), a mixture of factor analyzers
(MFA) and covariate dependent mixture of factor analyzers (dMFA).
For the second data example, given the ultra-high dimensionality of
the predictor space, we compared our approach only to MFA. . . . .

67

B.1 Percentiles 2.5th and 97.5th of sum of extra weights (sew q and location parameters involved in the two components with highest weights
(µ1 , µ2 ) under repulsive and non-repulsive atoms for different values
of α̃ considering 1, 000 draws from density IIb . . . . . . . . . . . . .

81

B.2 Mean and standard deviations of the total probability weight placed
on extra components (more than used in generating data) and KL divergence under non-repulsive and repulsive mixtures in different
synthetic data cases. . . . . . . . . . . . . . . . . . . . . . . . . . . .

81

xii

List of Figures
2.1

2.2

2.3

2.4

3.1

3.2

3.3

Contour plots of the repulsive prior π pγ1 , γ2 q satisfying definition 1(ii)
under p2.1q either p2.2q or p2.3q and p2.4q with hyperparameters pτ, ν q
equal to pI qp1, 2q, pII qp1, 4q, pIII qp5, 2q and pIV qp5, 4q . . . . . . . . .

16

pI q Standard normal density (solid), two-component mixture of nor-

mals sharing the same location parameter (dash) and Student’s t density (dash-dot), referred as pIa, Ib, Icq, pII q two-components mixture
of poorly (solid) and well separated (dot-dash) Gaussian densities, referred as pIIa, IIbq, pIII q mixture of poorly (solid) and well separated
(dot-dash) Gaussian and Pearson densities, referred as pIIIa, IIIbq,
pIV q two-components mixture of two-dimensional non-spherical Gaussians . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

23

Histogram of galaxy data (I) and acidity data (IV) overlaid with a
nonparametric density estimate using Gaussian kernel density estimation. Estimated clusters under galaxy data for non-repulsive (II) and
repulsive (III) priors and under acidity data for non-repulsive (V) and
repulsive (VI) priors . . . . . . . . . . . . . . . . . . . . . . . . . . .

28

Density of sum of extra weights under k=6 for non-repulsive (solid)
and repulsive (dash) and k=10 components for non-repulsive (dashdot) and repulsive (dot) . . . . . . . . . . . . . . . . . . . . . . . . .

29

Partition tree schematic: (i) Multiscale partition of the data. (ii)
Estimate dictionary density and weight associated to each set. (iii)
Nodes along the tree containing xi P <p . (iv) Conditional density of
yi given xi defined as a convex combination of densities associated to
the nodes containing xi . . . . . . . . . . . . . . . . . . . . . . . . . .

33

Illustrative example: Plot of true density (red line) and estimated density (50th percentile: solid line, 2.5th and 97.5th percentiles: dashed
lines) for four data points pI, II, III, IV q considering different training set size (a:100, b:200, c:300). . . . . . . . . . . . . . . . . . . . .

40

Swissroll-Manifold and S-Manifold embedded in R3 . . . . . . . . . .

41

xiii

3.4

3.5

4.1

4.2

Numerical results for various simulation scenarios. Top plot depicts
the relative mean-squared error of MSB (our approach), versus CART
(red) and Lasso (black) as a function of ambient dimension of x. Bottom plot depicts the ratio of CPU time as a function of ambient dimension of x. The simulation scenario considered is the linear subspace.
MSB outperforms both CART and Lasso regardless of ambient dimenW
sion (rmse
1 for all p). MSB compute time is relatively constant as
p increases, whereas Lasso’s compute time increases, thus, as n or p
increase, MSB CPU time becomes less than Lasso’s. MSB was always
significantly faster than CART and PC regression, regardless of n or
p. For all panels, n  100 when p varies, and p  300k when n varies,
where k indicates 1000, e.g., 300k 3  105 . . . . . . . . . . . . . . .

43

Numerical results for various simulation scenarios. Top plots depict
the relative mean-squared error of MSB (our approach), versus CART
(red) and Lasso (black) as a function of ambient dimension of x. Bottom plots depict the ratio of CPU time as a function of sample size.
The two simulation scenarios are: MFA (left) and Swissroll (right).
MSB outperforms both CART and Lasso in all two scenarios regardW
less of ambient dimension (rmse
1 for all p). MSB compute time
is relatively constant as n or p increase, whereas Lasso’s compute
time increases, thus, as n or p increase, MSB CPU time becomes less
than Lasso’s. MSB was always significantly faster than CART and
PC regression, regardless of n or p. For all panels, n  100 when
p varies, and p  300k when n varies, where k indicates 1000, e.g.,
300k 3  105 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

44

True value and estimate under MFA, dMFA and BFT of five variables
of yi given xi  pxi1 , xi2 qT for i  t1, . . . , 100u. Each row correspond
to a different element of the response vector y, while each column
correspond to a different method utilized to predict y. As shown,
BFT performs similarly to dMFA in estimating the five elements of
y, while a simple MFA (not depending on covariates) is not able to
capture most of the spatial structure. . . . . . . . . . . . . . . . . . .

63

Plots depicts the relative CPU time of BFT (our approach), versus
dMFA as a function of ambient dimension of x, under the normal and
the swissroll simulation scenario with q  500 and n  100. The x-axis
is the number of predictors involved in the experiment, where k equals
1 thousand, so that 2k=2,000. BFT outperforms dMFA regardless of
ambient dimension (rcpu 1 for all p). . . . . . . . . . . . . . . . . .

66

xiv

B.1 Plot of K-L divergence under six and ten components p6 : I, 10 : II q for
different choice of separation level c under density pIIaq for different
sample sizes (100:solid ; 1000:dash) and density pIIbq for different
sample sizes (100:dash-dot; 1000:dot) . . . . . . . . . . . . . . . . . .

xv

82

List of Abbreviations and Symbols
Symbols
X

Space of predictors

Y

Space of response variable

x

Vector of predictors

y

Response variable

<

Real numbers

Dirichlet

Dirichlet density.

Un

Uniform density.

IG

Inverse Gamma density

N pµ, σ q
Np pµ, Σq
M ult

univariate Normal density with mean µ and variance σ
p-variate Normal density with mean µ and covariance matrix Σ
Multinomial density

Abbreviations
MSE
N-R
R

Mean Squared Error.
Non-Repulsive.
Repulsive

MSB

Multiresolution Stick Breaking

BFT

Bayesian Factor Tree

MFA

Mixture of factor analyzers

xvi

dMFA

Covariates dependent Mixture of factor analyzers

K-L

Kullback-Leibler

AIC

Akaike Information Criterion

BIC

Bayesian Information Criterion

i.i.d.

Independent and identically distributed

CART
RF
CPU

Classification and regression trees
Random forest
Central processing unit

xvii

Acknowledgements
The completion of this work would have not been possible without the guidance and
advice of my advisor David Dunson. He helped me to grow as a researcher and to keep
things in perspective. At the same time, he motivated me a lot with his enthusiasm
towards statistics and his curiosity about other disciplines and new problems. I am
very grateful to my thesis committee members: Surya Tokdar, David Banks and
Joseph Lucas. A very special thanks to Mike West and David Banks. They helped
me start my experience at Duke and encouraged me during the difficult moments. I
really enjoyed collaborating with scientists from other fields. In particular I want to
mention Joshua Vogelstein and Vinayak Rao.

xviii

1
Introduction

1.1 Motivation
For decades mixture models have been extensively used for classification, discrimination and density estimation. In analyses of finite mixture models, a common concern
is over-fitting in which redundant mixture components having similar locations and
scales are introduced. Over-fitting can have an adverse impact on density estimation, since this leads to an unnecessarily complex model. Another common goal of
finite mixture modeling is clustering (Fraley and Raftery, 2002), and having components with similar locations, leads to overlapping kernels and lack of interpretability.
Introducing kernels with similar locations but different scales may be necessary to
fit heavy-tailed and skewed densities, and hence low separation in clustering and
over-fitting are distinct problems.
Recently, Rousseau and Mengersen (2011) studied the asymptotic behavior of
the posterior distribution in over-fitted Bayesian mixture models having more components than needed. They showed that a carefully chosen prior will lead to asymptotic emptying of the redundant components. However, several challenging practical
issues arise. For small to moderate sample sizes, the weight assigned to redundant
1

components is often substantial. This can be attributed to identifiability problems
that arise from a difficulty in distinguishing between models that partition each of
a small number of well separated components into a number of essentially identical
components. This issue leads to substantial uncertainty in clustering and estimation of the number of components, and is not specific to over-fitted mixture models;
similar behavior occurs in placing a prior on the number of components or using a
nonparametric Bayes approach such as the Dirichlet process.
The problem of separating components has been studied for Gaussian mixture
models (Dasgupta, 1999; Dasgupta and Schulman, 2007). Two Gaussians can be
separated by placing an arbitrarily chosen lower bound on the distance between their
means. Separated Gaussians have been mainly utilized to speed up convergence of
the Expectation-Maximization (EM) algorithm. In choosing a minimal separation
level, it is not clear how to obtain a good compromise between values that are
too low to solve the problem and ones that are so large that one obtains a poor fit.
Alternatively, we propose a repulsive prior discouraging closeness among componentspecific parameters without placing an hard constraint. This repulsive process leads
to better separated and more interpretable clusters while accurately estimating the
true density of the data.
Mixture models are also utilized to describe the conditional distribution of a
response variables given a set of predictors. In this framework an important issue is
the scalability of mixture models to massive numbers of predictors. Massive datasets
present statistical and computational challenges for machine learning because many
previously developed approaches do not scale-up sufficiently. Specifically, challenges
arise because of the ultrahigh-dimensionality, and relatively low sample size (the
“large p, small n” problem, Bernardo et al. (2003)). Parsimonious models for such big
data assume that the density in the ambient dimension concentrates around a lowerdimensional and possibly nonlinear subspace. Indeed, a plethora of methodologies
2

are emerging to estimate such lower-dimensional manifolds from high-dimensional
data (Rahman et al., 2005; Allard et al., 2012).
There is a rich machine learning and statistical literature on conditional density
estimation of a response y

P Y given a set of features (predictors) x  px1, x2, . . . , xpq P

X . Common approaches include hierarchical mixtures of experts (Jacobs et al.,
1991; Jiang and Tanner, 1999), kernel methods (Fan et al., 1996; Fan and Yim, 2004;
Holmes et al., 2010; Fu et al., 2011), Bayesian finite mixture models (Nott et al., 2012;
Tran et al., 2012; Norets and Pelenis, 2012) and Bayesian nonparametrics (Griffin
and Steel, 2006; Dunson et al., 2007; Chung and Dunson, 2009; Tokdar et al., 2010).
In all these works, there has been limited consideration of scaling to large p settings,
with the variational Bayes approach of Tran et al. (2012) being a notable exception.
For dimensionality reduction, they follow a greedy variable selection algorithm. Their
approach does not scale to the sized applications we are interested in. For example,
in a problem with p  1, 000 and n  500, they reported a CPU time of 51.7 minutes
for a single analysis. We are interested in problems many orders of magnitude or
more larger than this, and require a faster computing time while also accurately estimating the conditional density of a response variable. To our knowledge, there are
no nonparametric density regression competitors to our approach, which maintain
a characterization of uncertainty in estimating the conditional densities; rather, all
sufficiently scalable algorithms provide point predictions and/or rely on restrictive
assumptions such as linearity.
A widely used method to estimate a covariates-dependent density is to partition
observations into a nested sequence of subsets based on feature similarity, with simple models fit within each subset. This is the basis for CART (Breiman et al., 1984),
modifications such as random forests (Breiman, 2001), boosting (Shapire et al., 1998)
and bagging (Breiman, 1996). Though these algorithms can substantially improve
mean square error performance, computation can be expensive and performance de3

grades as the dimensionality of the predictor space increases. In fact, a significant
downside of divide-and-conquer algorithms is their poor scalability to high dimensional predictors. As the number of features increases, the problem of finding the best
splitting attribute becomes intractable so that tree based models cannot be efficiently
applied. As the number of features increases, also mixture of experts models become
computationally demanding, since both mixture weights and dictionary densities
are feature-dependent. In an attempt to make mixtures of experts more efficient,
sparse extensions relying on different variable selection algorithms have been proposed (Mossavat and Amft, 2011). However, performing variable selection in high
dimensions is effectively intractable: algorithms need to efficiently search for the
best subsets of predictors to include in weight and mean functions within a mixture model, an NP-hard problem. In chapter 3 we propose an algorithm based on
a novel stick breaking process which can scale substantially better than competitors
to high dimensional predictors while efficiently estimating the conditional density of
a response variable.
In this thesis we also focus on the challenging problem of learning a multivariate
density of a vector y

P

Y



<p indexed by features x

P

X



<q . This is an

important problem in many domains. For example, one may want to learn the joint
density of brain activity across sensors from MEG, EEG or fMRI data as a function
of patient tasks and characteristics. In modeling such data, it is most common to
assume either independence across sensors or that the data are multivariate Gaussian,
with the emphasis then on estimating a covariates dependent mean vector µpxq and

covariance matrix Σpxq (Fyshe et al., 2012). Though flexible approaches have been

introduced to model the p  p feature-dependent covariance matrix (Pourahmadi,
1999; Chiu et al., 1996; Hoff and Niu, 2012; Gelfand et al., 2004; Williams, 1996),
the predictive performance of such models depends strictly on the validity of the
normality assumption.
4

There has been relatively limited attention on multivariate conditional density estimation. Notable exceptions include Krauthausen and Hanebeck (2010) and Davis
and Hwang (1998). Krauthausen and Hanebeck (2010) models y through a mixture of spherical Gaussians with feature-dependent weights, while Davis and Hwang
(1998) estimates f py |xq by placing kernels with varying bandwidths at each of the
training data points. These algorithms have been tested only on low dimensional
datasets, and may become computationally intractable in bigger problems. Tree
based models, typically applied to settings involving a univariate response but can
be easily implemented in multivariate settings (Death, 2002; Larsen and Speckman,
2004; Hothorn et al., 2006; Lutz and Buhlmann, 2006). Although performance is
often excellent in small to moderate dimensions, scaling to large numbers of features
is a general problem for usual tree-based models.

1.2 Literature Review
1.2.1

Mixture Models

Finite mixture models characterize the density of y
f py |p, γ q 

k
¸



P Y  <m as

ph φpy; γh q,

(1.1)

h 1

where p

 pp1, . . . , pk qT

is a vector of probabilities summing to one, and φp; γ q is

a kernel depending on parameters γ

P Γ, which may consist of location and scale

parameters (McLachlan and Peel, 2000). There is a very rich literature on inference
for finite mixture models from both a frequentist (Figueiredo and Jain, 2002; Muthen
and Shedden, 1999) and Bayesian (Richardson and Green, 1997) perspective. In
practice, most of the frequentist literature focuses on maximum likelihood estimation,
with the Akaike information criterion (AIC) and other criteria used to estimate the
number of mixture components (Raftery and Fraley, 1998). Bayesian approaches
5

instead rely on placing a prior on the number of components and the componentspecific parameters, and hence may have some advantages in terms of accounting
for uncertainty in estimating the number of components while also regularizing the
component-specific parameters (Escobar and West, 1995; Richardson and Green,
1997). However, due to ease in computation, it has become popular to use over-fitted
mixture models in which a conservative upper bound on the number of components
is chosen.
Considering the finite mixture model in expression (1.1), a Bayesian specification is completed by choosing priors for the number of components k, the proba-

 pγ1, . . . , γk qT . TypDirichletpαq prior with

bility weights p, and the component-specific parameters γ
ically, k is assigned a Poisson or multinomial prior, p a
α  pα1 , . . . , αk qT , and γh

 P0 independently, with P0 often chosen to be conjugate

to the kernel φ. As an example, when φ is the normal kernel and γ is a vector
containing mean and standard deviation, i.e. γ

 pµ, σqT , a normal inverse-Gamma

prior is assigned to γ.
Posterior computation can proceed via a reversible jump Markov chain Monte
Carlo (Richardson and Green, 1997) algorithm involving moves for adding or deleting
mixture components. Unfortunately, in making a k

Ñk

1 change in model dimen-

sion, efficient moves critically depend on the choice of proposal density. Stephens
(2000a) proposed an alternate Markov chain Monte Carlo method, which treats the
parameters as a marked point process, but does not have clear computational advantages relative to reversible jump. For these reasons It has become popular to use
over-fitted mixture models in which k is chosen as a conservative upper bound on
the number of components. From a practical perspective, the success of over-fitted
mixture models has been largely due to ease in computation.
As motivated in Ishwaran and Zarepour (2002), simply letting αh

 c{k

for

h P t1, . . . , k u and a constant c ¡ 0 leads to an approximation to a Dirichlet process
6

mixture model for the density of y, which is obtained in the limit as k approaches infinity. An alternative finite approximation to a Dirichlet process mixture is obtained
by truncating the stick-breaking representation of Sethuraman (1994a), leading to
a similarly simple Gibbs sampling algorithm (Ishwaran and James, 2001). These
approaches are now used routinely in practice.
When working with mixture models, an important issue is the identifiability of
mixture parameters pγ, pq. In general, parameters are identifiable if distinct param-

eter values lead to different densities. Let f py |θq be a mixture density defined as
in 1.1 with θ being the vector of mixture parameters, i.e. θ

 pγ T , pT qT .

It can

be easily shown that two different vectors θ and θ1 can lead to the same mixture
density, i.e. f py |θq

 f py|θ1q.

The lack of identifiability is mainly caused by the in-

variance of the likelihood to relabeling of the components and over-fitting. The first
identifiability issue does not create problems when the model is estimated through
maximum likelihood; however it causes major problems when dealing with Bayesian
methods based on Markov chains Monte Carlo. In the Bayesian literature the lack
of identifiability due to relabeling of the components is a challenging problem better
known as label switching problem (Stephens, 2000b; Lavine and West, 1992; Jasra
et al., 2005). An effective technique used to overcome this identifiability problem is
relabeling the clusters at each MCMC iteration using a post-processing algorithm.
Examples of such approach include Yao and Lindsay (2009), Stephens (2000b) and
Cron and West (2011). A more serious identifiability issue is due to the introduction
of equal components. As an example, consider two mixture models f py |ppkq , γ pkq q

and f py |ppk 1q , γ pk 1q q involving k and k

1 components respectively. It can be

easily shown that parameters pppkq , γ pkq q and pppk 1q , γ pk 1q q satisfying the following

constraints

pk 1q  ppkq ,

ph

h

pk 1q  γ pkq ,
h

γh

7

@h

k

pkq  ppk 1q

pk

k 1

pk 1q ,

pk

pk 1q  γ pk 1q

γk

1

k

lead to the same mixture density, i.e. f py |ppkq , γ pkq q  f py |ppk 1q , γ pk 1q q. This identifiability issue may result in over-fitted mixtures where identical and consequently
unnecessary components are introduced. To our knowledge no methods have been
proposed to solve this identifiability issue.
1.2.2

Divide and Conquer Algorithms and Tree Based Models

Divide and conquer algorithms fit surfaces to data by explicitly dividing the input
space into a nested sequence of regions, and by fitting simple surfaces within these
regions. A well known example of such algorithms is CART (classification and regression trees) (Breiman et al., 1984). Starting from a set including all observations
(root), tree based methods recursively splits each subset into subsets containing more
homogenous observations. Generally observations are allocated to different subsets
through greedy algorithms and the number of subsets is determined by pruning the
tree according to a model choice criterion such as AIC and BIC. Recently, tree based
methods relying on full Bayesian specifications have been introduced. Bayesian tree
models estimate the tree by placing a prior on the space of all trees and implementing
stochastic search algorithms to explore the entire space (Chipman et al., 1993; Wu
et al., 2007; Mallick, 1998).
Though CART models are appealing in providing a simple, flexible and interpretable mechanism of dimensionality reduction, it is well known that single tree
estimates commonly have high variance and poor performance. There is a rich machine learning literature proposing improvements based on bagging (Breiman, 1996),
boosting (Shapire et al., 1998) and random forests (Breiman, 2001). All these methods overcome the limit associated to single tree models by combining results generated from multiple trees. The multiple trees setup can certainly leads to better
mean square errors by reducing the variability associated to the estimates. However,
8

these approaches may become computationally intensive when dealing with massive
number of features.
Another divide-and-conquer algorithm particularly useful to reduce the variance
associated to single tree estimates is mixture of experts (Jacobs et al., 1991). As
opposed to other divide-and-conquer algorithms, mixture of experts relies on soft
partitioning algorithms that allows observations to lie simultaneously in different
subsets. A mixture of experts model is a mixture model in which the model parameters, including mixture weights, are functions of covariates. In practice, observations
are assigned to different experts by a gating network through a probabilistic model.
Then, within each expert, observations are considered identically distributed. A
variety of mixture of experts models have been proposed in the last twenty years.
Some of them deal with infinitely many experts (Rasmussen and Ghahramani, 2002;
Meeds and Osindero, 2006), others propose a hierarchical structure where the density within each expert is a mixture model (Jordan and Jacobs, 1994; Bishop and
Svensen, 2003).
1.2.3

Factor Model and Mixture of Factor Analyzers

Factor analysis has been one of the most flexible tools utilized to model the dependence structure of a p-dimensional vector of random variables through a sparse decomposition of a p  p covariance matrix, Σ  ΘΘT

Σ0 with Σ0

 diagpσ1, . . . , σpq.

This covariance decomposition is obtained by considering the following model for
yi

P <p
yi

 µ0

with Θ being a p

k

Θηi

i

ηi

 Nk p0, I q

loading matrix and k

i

 Npp0, Σ0q

(1.2)

p. Model 1.2 implies that the

elements of yi are conditionally independent given the latent factors and the marginal
dependence among them is induced by the shared dependence on the latent factors.
The covariance matrix Σ can be derived by marginalizing out ηi . Tipping and Bishop
9

(2012) with their probabilistic principal component analysis showed that, under an
isotropic error model, i.e. Σ0



σI, the maximum likelihood estimate of the k

columns of the loading matrix converges to the first k principal components of the
data as σ approaches zero. Therefore, considering an isotropic error, it is possible to
combine the advantages of a probabilistic model with those of principal component
analysis.
Often there is interest in estimating the latent factors, interpreted as underlying
processes characterizing the data. However, these factors are not identifiable without
imposing further constraints on the loading matrix (Bernardo et al., 2003; Lopes and
West, 2004). In fact, for any k  k orthogonal matrix Γ, Θ and Θ1

 ΘΓ, lead to

the same covariance decomposition. To solve this identifiability issue and uniquely
estimate the latent factors one could constrain the loading matrix to be lower triangular (Geweke and Zhou, 1996; Aguilar and West, 2000) or orthogonal (Seber,
2004). Though inference on latent factors remains an interesting and open problem,
in many applications the main focus is the estimation of the covariance matrix Σ.
Latent factor models provide a low rank approximation of a large scale covariance
matrix and it is related to a set of articles, including Zou et al. (2006), Shen and
Huang (2008), Witten et al. (2009) and Johnstone and Lu (2009), which mainly
focused on sparse principal component analysis. In the analysis of factor models
another crucial point is the determination of the number of factors. The number of
latent factors can be determined through variable selection criteria (Onatski, 2005;
Minka, 2001), reversible jump algorithms (Lopes et al., 2011; Hastie and Green, 2012)
and adaptive Markov chains (Bhattacharya and Dunson, 2011).
Though factor model offers a flexible tool to describe the dependence structure
of a set of variables its applicability is limited by linearity. This limitation can
be overcome by combining local models in the form of finite mixture (Tipping and
Bishop, 1997). Mixtures of factor analyzers (MFA) model a p-dimensional vector of
10

observations as follows

yi

N
¸





ph Np pµh , Θh Θ1h

Σh0 q

(1.3)

h 1

P <p, Θh P <pk being the loading matrix, pp1, . . . , pN qT being positive
weights summing up to one, Σh0  diag pσh1 , . . . , σhp q. According to model 4.1, obwith µh

servations are assumed to belong to the hth cluster with probability ph and, within
each cluster, observations are modeled through a linear factor model (equation 1.2)
with parameters pµh , Λh , Σh0 q. Mixture of factor analyzers offers the potential to adequately model the density of high-dimensional observations while also allowing for
both clustering and local dimensionality reduction. In order to estimate the parameters of the MFA many approaches have been introduced. Some of them (Ghahramani
and Hinton, 1997; Zhou and Liu, 2008) estimate the model using the Expectation
Maximization algorithm (Dempster et al., 1977), others rely on variational inference (Ghahramani and Beal, 2000), others on full bayesian inference (Utsugi and
Kumagai, 2011).

1.3 Dissertation Outline
In this thesis we deal with different problems in mixture modeling such us identifiability, over-fitting and scalability to massive number of features.
The second chapter offers a possible solution to the identifiability and over-fitting
problem characterizing finite mixture models. In contrast to the majority of the
Bayesian literature on discrete mixture models, instead of drawing the componentspecific parameters tγh u in 1.1 independently from a common prior, we propose a
joint prior for γ

 pγ1, . . . , γk qT

that is chosen to assign low density to γh ’s located

close together. We consider two types of repulsive priors, (i) priors guarding against
over-fitting by penalizing redundant kernels having close to identical locations and
11

scales and case (ii) priors discouraging closeness in only the locations to favor well
separated clusters.
The third chapter focuses on learning the conditional density of a response variable given an high dimensional vector of predictors. We present a multiresolution
approach which learns a multiscale dictionary of densities, constructed as Gaussian
within each set of a multiscale partition tree for the features. This tree is efficiently learned in a first stage using a fast and scalable graph partitioning algorithm
(Karypis and Kumar, 1999). Then, the conditional density f py |xq for each x P X is
expressed as a convex combination of coarse to fine scale dictionary densities. This
is accomplished in a Bayesian manner using a novel multiresolution stick-breaking
process, which allows the data to inform about the optimal bias-variance tradeoff.
The proposed model allows borrowing information across different resolution levels
and reaches a good compromise in terms of the bias-variance tradeoff. We show that
the algorithm scales efficiently to massive numbers of features.
Finally, the fourth chapter focuses on learning the conditional density of a multivariate vector of response given an high dimensional vector of predictors. In many
applications, there is interest in assessing how the density of a multivariate response
changes as function of features, with both the response and the predictor being
highly dimensional. To address this challenging problem, we propose a multiscale
predictor-dependent mixture of factor analyzers in which specific-component parameters depend on the path of the predictor vector through a multiscale partition tree.
By borrowing information across resolution levels, we allow local adaptivity in which
a single factor model may suffice in terms of the bias-variance tradeoff in certain
regions of the predictor space, while in other regions additional layers are required.

12

2
Repulsive Mixtures

Mixture models have been extensively utilized for density estimation, clustering and
as a component in flexible hierarchical models. In using mixture models for clustering, identifiability problems arise if mixture components are not sufficiently well
separated and the data for the different sub-populations contain substantial overlap.
Insufficiently separated components also create problems in using mixture models for
density estimation and robust modeling, as redundant components that are located
close together can be introduced leading to an unnecessarily complex model as well
as to various computational problems. Current practice in Bayesian mixture modeling generates the component-specific parameters from a common prior, which tends
to favor components that are close together. As an alternative, in this chapter, we
propose to generate mixture components from a repulsive process that favors placing
components further apart.

13

2.1

Bayesian Repulsive Mixture Models

2.1.1

Repulsive Densities

We seek a prior on the component parameters in (1.1) that automatically favors
spread out components near the support of the data. Instead of generating the
atoms γh independently from P0 , one could generate them from a repulsive process
that automatically pushes the atoms apart. This idea is conceptually related to the
literature on repulsive point processes (Huber and Wolpert, 2009). In the spatial
statistics literature, a variety of repulsive processes have been proposed. One such
model assumes that points are clustered spatially, with the vector of cluster centers γ
having a Strauss density (Lawson and Clark, 2002), that is ppk, γ q9β k ρrpγ q where k is
the number of clusters, β

¡ 0, 0

ρ ¤ 1 and rpγ q is the number of pairwise centers

that lie within a pre-specified distance r of each other. A possibly unappealing
feature is that repulsion is not directly dependent on the pairwise distances between
the clusters. We propose an alternative class of priors, which smoothly push apart
components based on their pairwise distances.
Def 1. A density hpγ q is repulsive if for any δ

¡ 0 there is a corresponding  ¡ 0
such that hpγ q δ for all γ P ΓzG , where G  tγ : dpγs , γj q ¡ ; s  1, . . . , k; j su
and d is a distance.
We consider two special cases (i) dpγs , γj q is the distance between the sth and jth

kernel, (ii) dpγs , γj q is the distance between sub-vectors of γs and γj corresponding to
only locations. Priors following definition 1(i) limit over-fitting in density estimation,
while priors following definition 1(ii) favor well-separated clusters.
As a convenient class of repulsive priors which smoothly push components apart,
we propose
π pγ q  c1



k
¹



g0 pγj q hpγ q,

j 1

14

(2.1)

with c1 being a normalizing constant that can be intractable to calculate. The
dependence of c1 on k leads to complications in estimating k that motivate the use
of an over-specified mixture that treats k as an upper bound on the number of
components. The proposed prior is closely related to a class of point processes from
the statistical physics and spatial statistics literature called Gibbs processes (Daley
and Vere-Jones, 2008). We assume g0 : Γ Ñ < and h : Γk

Ñ r0, 8q are continuous

with respect to Lesbesgue measure, and h is bounded above by a positive constant c2
and is repulsive according to definition 1 with d differing across cases. It follows that
density π defined in (2.1) is also repulsive. For location-scale kernels, let γj

 pµj , Σj q

and g0 pµj , Σj q  ξ pµj qψ pΣj q with µj and Σj being respectively the location and the
scale parameters. A special hardcore repulsion is produced if the repulsion function
is zero when at least one pairwise distance is smaller than a pre-specified threshold.
Such a density implies choosing a minimal separation level between the atoms.
We avoid hard separation thresholds by considering repulsive priors that smoothly
push components apart. In particular, we propose two repulsion functions defined as
hpγ q 

¹

tps,j qPAu

g tdpγs , γj qu

(2.2)

hpγ q  min g tdpγs , γj qu

tps,j qPAu

(2.3)

 tps, j q : s  1, . . . , k; j su and g : < Ñ r0, M s a strictly monotone differentiable function with g p0q  0, g pxq ¡ 0 for all x ¡ 0 and M
8. It is
with A

straightforward to show that h in (2.2) and (2.3) is integrable and satisfies definition
1. The two alternative repulsion functions differ in their dependence on the relative distances between components, with all the pairwise distances playing a role in
(2.2), while (2.3) only depends on the minimal separation. A flexible choice of g
corresponds to
g tdpγs , γj qu  exp
where τ



 τ tdpγs, γj quν



,

(2.4)

¡ 0 is a scale parameter and ν is a positive integer controlling the rate at
15

which g approaches zero as dpγs , γj q decreases. Figure 2.1 shows contour plots of the

prior π pγ1 , γ2 q defined as (2.1) and satisfying definition 1(ii) with γ1 , γ2

P R, d the

Euclidean distance, g0 the standard normal density, the repulsive function defined as
(2.2) or (2.3) and g defined as (2.4) for different values of pτ, ν q. As τ and ν increase,
the prior increasingly favors well separated components.
(I)

(II)

5

5

0

0

−5

−5
−5

0

5

−5

(III)

0

5

(IV)

5

5

0

0

−5

−5
−5

0

5

−5

0

5

Figure 2.1: Contour plots of the repulsive prior π pγ1 , γ2 q satisfying definition
1(ii) under p2.1q either p2.2q or p2.3q and p2.4q with hyperparameters pτ, ν q equal
to pI qp1, 2q, pII qp1, 4q, pIII qp5, 2q and pIV qp5, 4q

2.1.2

Theoretical Properties

Theoretical properties of the proposed prior are considered under definition 1(ii),
though all results can be modified to accommodate definition 1(i). For some results,
the kernel will be assumed to depend only on location parameters, while for others
on both location and scale parameters. Let Π be the prior induced on
where Fk is the space of all distributions defined as (1.1). Let
³

8

 Fk ,

j 1

}  }1 denote the L1

norm and KLpf0 , f q  f0 logpf0 {f q refer to the Kullback-Leibler (K-L) divergence
between f0 and f . Density f0 belongs to the K-L support of the prior Π if Πtf :
16

KLpf0 , f q

u

¡ 0 for all  ¡ 0. Let the true density f0 : <m Ñ < be defined
°
as f0  kh1 p0h φpγ0h q with γ0h P Γ and γ0j s such that there exists an 1 ¡ 0 such
that mintps,j q:s j u dpγ0s , γ0j q ¥ 1 , d being the Euclidean distance of sub-vectors of
°
γ0j and γ0s corresponding to only locations. Let f  kh1 ph φpγh q with γh P Γ. Let
γ  π and π satisfy definition 1(ii). Let p  λ with λ  Dirichletpαq and k  ϑ
with ϑpk  k0 q ¡ 0. Let θ  pp, γ q. These assumptions on f0 and f will be referred
0

to as condition B0. The next lemma provides sufficient conditions under which the
true density is in the K-L support of the prior for location kernels.
Lemma 2. Assume condition B0 is satisfied with m



1. Let D0 be a compact

set containing location parameters pγ01 , . . . , γ0k0 q. Let φ and π satisfy the following
conditions:

P Y, the map γ Ñ φpy; γ q is uniformly continuous
A2. for any y P Y, φpy; γ q is bounded above by a constant

(
³ 
A3. f0 log supγ PD φpγ q  log tinf γ PD φpγ qu 8

A1. for any y

0

0

P Γk
with mintps,j q:s j u dpxs , xj q ¥ υ for υ ¡ 0 there is a δ ¡ 0 such that π pγ q ¡ 0
for all γ
satisfying ||γ  x||1 δ
A4. π is continuous with respect to Lebesgue measure and for any vector x

Then f0 is in the K-L support of the prior Π.
Lemma 3. The repulsive density in (2.1) with h defined as either (2.2) or (2.3)
satisfies condition A4 in lemma 2.
The next lemma formalizes the posterior rate of concentration for univariate
location mixtures of Gaussians.
Lemma 4. Let condition B0 be satisfied, let m



1 and φ be the normal kernel

depending on a location parameter µ and a scale parameter σ. Assume that condition

piq, piiq and piiiq of theorem 3.1 in Scricciolo (2011) and assumption A4 in lemma 2
are satisfied. Furthermore, assume that
17

C1) the joint density π leads to exchangeable random variables and for all k the
density of µ1 satisfies πm p|µ1 | ¥ tq À exp pq1 t2 q for a given q1

marginal

C2) there are constants u1 , u2 , u3
 ¤ u3

π p||µ  µ0 ||1

¡0

¡ 0, possibly depending on f0, such that for any

¤ q ¥ u1 exppu2k0 logp1{qq

Then the posterior rate of convergence relative to the L1 metric is n

 n1{2 log n.

Lemma 4 is basically a modification of theorem 3.1 in Scricciolo (2011) to our
proposed repulsive mixture model. Lemma 5 gives sufficient conditions for π to
satisfy condition C1 and C2 in lemma 4.
Lemma 5. Let π be defined as (2.1) and h be defined as either (2.2) or (2.3), then
π satisfies condition C2 in lemma 4. Furthermore, if for a positive constant n1 the
function ξ satisfies ξ p|x| ¥ tq À exppn1 t2 q, π satisfies condition C1 in lemma 4.
As motivated above, when the number of mixture components is chosen to be
conservatively large, it is appealing for the posterior distribution of the weights of
the extra components to be concentrated near zero. Theorem 6 formalizes the rate of
concentration with increasing sample size n. One of the main assumptions required
in theorem 6 is that the posterior rate of convergence relative to the L1 metric is
δn

 n1{2plog nqq with q ¥ 0. We provided the contraction rate, under the proposed

prior specification and univariate Gaussian kernel, in lemma 4. However, theorem
6 is a more general statement and it applies to multivariate mixture density of any
kernel.
Theorem 6. Let assumptions B0  B5 be satisfied. Let π be defined as (2.1) and h

 maxpα1, . . . , αk q m{2 and for positive
constants r1 , r2 , r3 the function g satisfies g pxq ¤ r1 xr for 0 ¤ x r3 then

be defined as either (2.2) or (2.3). If ᾱ

2



lim lim sup En0 P

M

Ñ8

Ñ8

n

#



min

tιPSk u

k
¸



pιpiq

i k0 1

18

¡ M n1{2plog nqqp1

p

q{ q

s k0 ,α sr2

+

0

with spk0 , αq

 k0  1

mk0

ᾱpk  k0 q, sr2

possible permutations of t1, . . . , k u.

 r2

m{2  ᾱ and Sk the set of all

Theorem 6 is a modification of theorem 1 in Rousseau and Mengersen (2011) to
our proposed repulsive mixture model. Theorem 6 implies that the posterior expectation of weights of the extra components is of order Opn1{2 plog nqqp1 spk0 ,αq{sr2 q q.
When g is defined as (2.4), parameters r1 and r2 can be chosen such that r1
r2

 ν.

 τ and

When the number of components is unknown, with only an upper bound known,
the posterior rate of convergence is equivalent to the parametric rate n1{2 (Ishwaran
et al., 2001). In this case, the rate in theorem 6 is n1{2 under usual priors or our
repulsive prior. However, in our experience using usual priors, the sum of the extra
components can be substantial in small to moderate sample sizes, and often has
high variability. As we show in Section 2.3, for repulsive priors the sum of the extra
component weights is close to zero and has small variance for small as well as large
sample sizes. When an upper bound on the number of components is unknown, the
posterior rate of concentration is n1{2 plog nqq with q

¡ 0.

In this case, according

to theorem 6, using our prior specification the logarithmic factor in theorem 1 of
Rousseau and Mengersen (2011) can be improved.

2.2 Posterior Computation and Parameter Calibration
2.2.1

Posterior Computation

For posterior computation, we use a slice sampling algorithm (Neal, 2003), a class of
Markov chain Monte Carlo algorithms widely used for posterior inference in infinite
mixture models (Kalli et al., 2011). Letting g0 be a conjugate prior, introduce a

19

latent variable u which is jointly modeled with γ through
π pγ1 , . . . , γk , uq9



k
¹



g0 pγh q 1 thpγ1 , . . . , γk q ¡ uu .

h 1

Here 1pB q is the indicator function, equalling 1 if the event B occurs and 0 otherwise.

Marginalizing out u, we recover the original density π pγ1 , . . . , γk q. For a repulsion
function defined as (2.3), let Bj

 ts:sju rγj : gtdpγs, γj qu ¡ us. When the repulsion

function is defined as (2.2), one can introduce a latent variable for each product
term. Under repulsive priors satisfying definition 1(i), the set Bj might not be easy
to compute. However, when covariance matrices are constrained to be diagonal,
vectors γj s can be easily sampled element-wise. For multivariate observations, the
location parameter vector can be sampled element-wise from truncated distributions.
For simplicity, assume that h is defined as 2.3, ψ is the Inverse-Gamma density
with parameters paσ , bσ q, g0 is the m-variate standard normal density and φ is the
m-variate spherical normal kernel. Let Si

P t1, . . . , ku be the variable indicating

which cluster the ith observation belongs to. Let nj be the number of data points
in the jth cluster and let ȳj be the average of observations in the jth cluster. Let
u

 g1puq, αp  pα1

n1 , . . . , αk

nk q and γj

 pµj , σj q.

Then the sampling

algorithm can be summarized by the following steps:
Step 1. Update Si , for i P t1, . . . , nu, by multinomial sampling

pSi|q  M ultpl1, . . . , lk q,

lj

 °k pj φpyi; µj , σj I q ;
h1 ph φpyi ; µh , σh I q

Step 2. For repulsive priors satisfying definition 1(ii), sample pµj , σj q from

pµj |q  fµ 9N p1
j

nj {σj q1 ȳj nj {σj , I p1

20

(

nj {σj q1 1tµj

P Apµj qu

$
&

pσj |q  fσ  IG %aσ
j

¸

,
.

1
pyi  µj qT pyi  µj q2 ti:S j u

nj m
, bσ
2

i

For repulsive priors satisfying definition 1(i) sample pµj , σj q from
µj

 fµ

j

;

1{σj

 fσ1 9fσ 1tσj P Apσj qu
j

j

The set A is defined as Apq  t : dpγj , γs q ¡ u , @s  j u with dp, q being defined as
the symmetric K-L divergence for repulsive priors satisfying definition 1(i) and the
Euclidean distance for repulsive priors satisfying definition 1(ii).

Step 3. Sample u and p from

pu|q  U n t0, hpγ qu ,
2.2.2

p  Dirichlet pαp q

Calibration

An important issue in implementing repulsive mixture models is elicitation of the
repulsion hyper-parameters pτ, ν q. Although a variety of strategies can be considered,
we propose a simple approach that can be used to obtain a default hyper-parameter
choice in general applications. In case (i) we choose dp, q as the symmetric KullbackLeibler divergence defined for Gaussian kernels as
s12

 dpγ1, γ2q  trpΣ1Σ2 1q

1
trpΣ
1 Σ2 q  2m

pµ1  µ2qT pΣ1 1

1
Σ
2 qpµ1  µ2 q,

while in case (ii) we use the Euclidean distance between the location parameters.
For both case (i) and case (ii), define d¯ as the mean of pairwise distances between
°
atoms, d¯  np1Aq ps,j qPA dpγs , γj q with A

 tps, j q : s  1, . . . , k; j

su and npAq

the cardinality of set A. Let f1 and f2 denote the densities of d¯ under repulsive and
non-repulsive priors respectively, with p%j , ςj q the mean and standard deviation of fj
for j

 1, 2. We choose pτ, ν q so that f1 and f2 are well-separated using the following

definition of separation (Dasgupta, 1999).
21

Def 7. Given a positive constant c, f1 and f2 are c-separated if %1 %2
We have found that ν

¥ c maxpς1, ς2q.

 2 and ν  1 provide good default values in case (i) and

(ii) respectively and we fix ν at these values in all our applications below. For a
given value of ν, τ is found by starting with small values, estimating the mean and
variance of d¯ through Monte Carlo draws, and incrementing τ until definition 7 is
satisfied for a pre-specified c. We use c

 4 in our implementations.

A sensitivity

analysis for different values of c can be found in appendix B.

2.3 Synthetic Examples
Simulation examples were considered to assess the performance of the repulsive prior
in density estimation, clustering and emptying of extra components. Figure 2.2 plots
the true densities in the various cases that we considered. For each synthetic dataset,
repulsive and non-repulsive mixture models were compared considering a fixed upper
bound on the number of components; extra components should be assigned small
probabilities and hence effectively excluded. The slice sampler was run for 10, 000
iterations with a burn-in of 5, 000. The chain was thinned by keeping every 10th
draw. To overcome the label switching problem, the samples were post-processed
following the algorithm of Stephens (2000b). Details on parameters involved in the
true densities, choice of prior distributions and methods used to compute quantities
presented in this section can be found in Appendix B.
Repulsive mixtures satisfying definition 1(i) and non-repulsive mixtures were compared. For this experiment 1, 000 draws from a standard normal density and a two
component mixture of overlapping normals was considered. Both repulsive and nonrepulsive mixtures were run considering six as the upper bound of the number of
components. Table 2.1 shows posterior summaries of parameters involved in the
components with highest weights. Clearly, repulsive mixtures lead to a more parsi22

(I)

(II)

0.6

0.6

0.4

0.4

0.2

0.2

0
−5

0

0

5

−2

0

(III)

(IV)

1

3

0.8

2

0.6

1

0.4

0

0.2

−1

0
−3

−2

−1

0

2

1

2

−2
−2

3

−1

0

1

2

3

Figure 2.2: pI q Standard normal density (solid), two-component mixture of normals sharing the same location parameter (dash) and Student’s t density (dash-dot),
referred as pIa, Ib, Icq, pII q two-components mixture of poorly (solid) and well separated (dot-dash) Gaussian densities, referred as pIIa, IIbq, pIII q mixture of poorly
(solid) and well separated (dot-dash) Gaussian and Pearson densities, referred as
pIIIa, IIIbq, pIV q two-components mixture of two-dimensional non-spherical Gaussians
monious representation of the true densities and more accurate parameter estimates.
The mean and standard deviation of the K-L divergence under the first data example
were p0.003, 0.002q and p0.004, 0.002q for non-repulsive and repulsive mixtures respec-

tively; while under the second data example were p0.006, 0.003q and p0.009, 0.003q
for non-repulsive and repulsive mixtures respectively. Therefore, repulsive mixtures
were able to concentrate more on the reduced model while performing similarly to
non-repulsive mixtures in estimating the true density.
Repulsive mixtures satisfying definition 1 (ii) and non-repulsive mixtures were
compared to assess clustering performance. Table 2.2 shows summary statistics of
the K-L divergence, the misclassification error and the sum of extra weights under repulsive and non-repulsive mixtures with six mixture components as the upper bound.

23

Table 2.2 shows also the misclassification error resulting from hierarchical clustering
(Locarek-Junge and Weihs, 2009). In practice, observations drawn from the same
mixture component were considered as belonging to the same category and for each
dataset a similarity matrix was constructed. The misclassification error was established in terms of divergence between the true similarity matrix and the posterior
similarity matrix. As shown in table 2.2, the K-L divergences under repulsive and
non-repulsive mixtures become more similar as the sample size increases. For smaller
sample sizes, the results are more similar when components are very well separated.
Since a repulsive prior tends to discourage overlapping mixture components, a repulsive model might not estimate the density quite as accurately when a mixture of
closely overlapping components is needed. However, as the sample size increases, the
fitted density approaches the true density regardless of the degree of closeness among
clusters. Again, though repulsive and non-repulsive mixtures perform similarly in
estimating the true density, repulsive mixtures place considerably less probability on
extra components leading to more interpretable clusters. In terms of misclassification error, the repulsive model outperforms the other two approaches while, in most
cases, the worst performance was obtained by the non-repulsive model.
Potentially, one may favor fewer clusters, and hence possibly better separated
clusters, by penalizing the introduction of new clusters more through modifying the
precision in the Dirichlet prior for the weights; in appendix B, we demonstrate that
this cannot solve the problem.

2.4 Real Data
We tested the performance of our proposed prior specification on three real datasets.
The first involves 82 measurements of the velocities in km/s of galaxies diverging
24

Table 2.1: Posterior mean and standard deviation of weights, location and scale
parameters under dataset drawn from densities pIa, Ibq

True
N-R
R

Density Ia
Comp 1
p̂1
µ̂1
σ̂1
1
0
1
0.53 0.01 0.85

Density Ib
p̂1
0.7
0.44

0.00

0.67

Comp 1
µ̂1
σ̂1
0
0.2
0.08
1.21

p̂2
0.3
0.34

Comp 2
µ̂2
σ̂2
0
2
0.12 1.33

p0.16q p0.04q p0.25q p0.06q p0.10q p1.05q p0.06q p0.16q p1.11q
0.87

0.84

0.02

0.28

0.27

0.09

2.36

p0.07q p0.01q p0.04q p0.05q p0.03q p0.02q p0.09q p0.23q p0.75q

from our own (Escobar and West (1995), Richardson and Green (1997)), the second
consists of the acidity index measured in a sample of 155 lakes in north central
Wisconsin (Richardson and Green (1997)), and the third consists of 150 observations
from three different species of iris each with four measurements (Wang, 2010).
For the first two datasets, a repulsive mixture satisfying definition 1(i) was considered and a five-component mixture model was fit while for the third dataset a
repulsive mixture satisfying definition 1(ii) was considered and both six components
and ten components were considered as the upper bound. The same prior specification, Markov chain Monte Carlo sampler, and relabeling technique as in section 2.3
were utilized.
For the galaxy data, figure 2.3 reveals that there are three non-overlapping clusters with the one close to the origin relatively large compared to the others. Although
this large cluster might be interpreted as two highly overlapping clusters, it appears
to be well approximated by a single normal density. Richardson and Green (1997)
and Escobar and West (1995) estimated the number of components, obtaining a posterior distribution on k concentrating on values ranging from 5 to 7. This may be
due to the non-repulsive prior allowing closely overlapping components, favoring relatively large values of k. Figure 2.3 reveals that the non-repulsive prior specification
leads to two overlapping and essentially indistinguishable clusters. Under repulsive

25

Table 2.2: Mean and standard deviation of K-L divergence, misclassification error
and sum of extra weights resulting from non-repulsive mixture and repulsive mixture with a maximum number of clusters equal to six under different synthetic data
scenarios.
n=100

n=1,000

Ic
IIa
K-L divergence
N-R
0.05 0.03
p0.03q p0.01q p0.02q
R
0.06 0.05
p0.03q p0.02q
Misclassification
HCT
0.12 0.11
N-R
0.69 0.26
p0.10q p0.10q
R
0.53 0.18
p0.10q p0.09q
Sum of extra weights
N-R
0.30 0.21
p0.10q p0.11q
R
0.08 0.08
p0.05q p0.07q
K-L divergence
N-R
0.01 0.01
p0.00q p0.00q
R
0.01 0.01
p0.00q p0.00q
Misclassification
HCT
0.05 0.42
N-R
0.65 0.24
p0.11q p0.08q
R
0.46 0.13
p0.16q p0.04q
Sum of extra weights
N-R
0.30 0.21
p0.11q p0.11q
R
0.10 0.09
p0.04q p0.06q

IIb

IIIa

IIIb

IV

0.07

0.05

0.08

0.22

0.08

0.07

0.09

0.28

0.04
0.06

0.12
0.17

0.08
0.05

0.21
0.13

0.01

0.10

0.01

0.05

0.09

0.16

0.07

0.13

0.02

0.04

0.02

0.06

0.01

0.01

0.01

0.02

0.01

0.01

0.01

0.03

0.01
0.03

0.42
0.14

0.01
0.03

0.20
0.19

0.00

0.03

0.00

0.17

0.03

0.16

0.03

0.29

0.00

0.01

0.00

0.25

p0.02q p0.03q p0.05q

p0.03q p0.03q p0.03q p0.04q
p0.04q p0.09q p0.06q p0.05q
p0.02q p0.05q p0.01q p0.02q
p0.07q p0.09q p0.07q p0.08q
p0.02q p0.05q p0.02q p0.03q
p0.00q p0.00q p0.00q p0.01q
p0.00q p0.00q p0.00q p0.01q
p0.04q p0.09q p0.03q p0.02q
p0.01q p0.02q p0.01q p0.01q
p0.04q p0.10q p0.03q p0.03q
p0.00q p0.01q p0.00q p0.03q

26

priors, no clusters overlap significantly and unnecessary components receive a weight
close to zero.
For the acidity data, figure 2.3 suggests that two clusters are involved. Since
one of them appears to be highly skewed, we expect that three clusters might be
needed to approximate this density well. Richardson and Green (1997) obtained a
posterior for k almost equally concentrated on values of k ranging from 3 to 5. Figure
2.3 shows the estimated clusters for both repulsive and non-repulsive priors. With
non-repulsive priors, four clusters receive significant weight and two of them overlap
significantly. With repulsive priors, only three clusters receive significant weight and
all of them appear fairly separated.
The iris data were previously analyzed by Sugar and James (2003) and Wang
(2010) using new methods to estimate the number of clusters based on minimizing
loss functions. They concluded the optimal number of clusters was two. This result
did not agree with the number of species due to low separation in the data between
two of the species. Such point estimates of the number of clusters do not provide
a characterization of uncertainty in clustering in contrast to Bayesian approaches.
Repulsive and non-repulsive mixtures were fitted under different choices of upper
bound on the number of components. Since the data contains three true biological
clusters, with two of these having similar distributions of the available features, we
would expect the posterior to concentrate on two or three components. Posterior
means and standard deviations of the three highest weights were p0.30, 0.23, 0.13q

and p0.05, 0.04, 0.04q for non-repulsive and p0.56, 0.29, 0.08q and p0.05, 0.04, 0.03q for
repulsive. Clearly, repulsive priors lead to a posterior more concentrated on two
components, and assign low probability to more than three components. Figure
2.4 shows the density of the total probability assigned to the extra components.
This quantity was computed considering the number of species as the true number
of clusters. According to figure 2.4, our repulsive prior specification leads to extra
27

component weights very close to zero regardless of the upper bound on the number of
components. The posterior uncertainty is also small. Non-repulsive mixtures assign
large weight to extra components, with posterior uncertainty increasing considerably
as the number of components increases.
(I)

(II)

(III)

1

1

1

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

0

−2

0

0

2

−2

(IV)

0

0

2

(V)
1

1

0.8

0.8

0.8

0.6

0.6

0.6

0.4

0.4

0.4

0.2

0.2

0.2

−2

0

2

0

−2

0

0

2

(VI)

1

0

−2

2

0

−2

0

2

Figure 2.3: Histogram of galaxy data (I) and acidity data (IV) overlaid with a
nonparametric density estimate using Gaussian kernel density estimation. Estimated
clusters under galaxy data for non-repulsive (II) and repulsive (III) priors and under
acidity data for non-repulsive (V) and repulsive (VI) priors

28

20

15

10

5

0
0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

Figure 2.4: Density of sum of extra weights under k=6 for non-repulsive (solid)
and repulsive (dash) and k=10 components for non-repulsive (dash-dot) and repulsive
(dot)

29

3
Dictionary Learning for Conditional Distributions

Estimation of the conditional distribution of a response given high-dimensional features is a challenging problem arising in a number of important application areas,
including neuroscience, genetics, and video processing. For example, one might desire
automated estimation of a predictive density for a continuous or categorical neurologic phenotype of interest, such as intelligence or a creativity score, on the basis
of available data for a patient including neuroimaging. The challenge is to estimate
the probability density function of the phenotype based on a high-dimensional image of the subject’s brain. In real data applications, often the relationship between
predictors and response is non linear so that it is important to allow not only the
mean but also the variance and shape of the response density to change flexibly with
features, which are massive dimensional. In this chapter, we propose a novel stick
breaking multiresolution that can flexibly and efficiently characterize the density of a
response variable given high dimensional predictors. The algorithm scales efficiently
to massive numbers of features, and can be implemented with slice sampling.

30

3.1 Methodology
We aim to build a flexible and scalable model for the density of y
set of predictors. Let x

P

predictor random variable.

P

< given a

 <p be a p-dimensional Euclidean vector-valued
Let f pxq denote the marginal probability density of x.
X

We assume that f pxq concentrates around a lower-dimensional, possibly nonlinear,

subspace M. For example, M could be a union of affine subspaces, or a smooth
compact Riemannian manifold. Let y

P Y  < be a real-valued target variable. Let

x and y be sampled from some true but unknown joint distribution. We would like
to learn f py |xq. We assume that we obtain n independently and identically sampled

observations, pyi , xTi qT for i P t1, . . . , nu.
3.1.1

Model Overview

We propose a general modular approach to learn the conditional distribution of y
given an high dimensional vector of predictors x consisting in two components: (i)
a tree decomposition of the feature space, (ii) an assumed form of the conditional
probability model. A tree decomposition T yields a multiscale partition of the data
or the ambient space in which the data live. Starting from the coarsest scale, corresponding to the entire set, each set is split into two or more mutually exclusive
subsets. This process continues until some convergence criteria is satisfied, e.g. the
number of observations allocated to the finest scales is below some chosen threshold.
Figure 3.1(i) shows a dyadic partition of the predictor space where a generic set Cj,s
is partitioned into two subsets Cj
Cj,s

 Cj

1,s1



1,s1

Cj

1,s2

 0 as the root node/cell.

Cj

,

such that
1,s1



Cj

1,s2

H

 tCj,suKs1 provides a partition of X . We define
For each j ¡ 0, each Cj,s has a unique parent node
j

For each scale j, the set of cells Cj
j

1,s2

and Cj

31

Cj 1,s1 containing Cj,s , and conversely, any Cj,s

 Cj1,s1 is called a child of Cj1,s1 .

Let the set of ancestors and descendants of Cj,s be respectively defined as:

Aj,s

 tpj 1, s1q : j 1

j, Cj,s

 Cj1,s1 u

, Dj,s

 tpj 1, s1q : j 1 ¡ j, Cj1,s1  Cj,su

Considering a given tree decomposition T of X , each xi

PX

(3.1)

has an associated

path characterized by the sets including xi (see figure 3.1(iii)). We assume that
the density of yi depends on xi through this tree partition. Specifically, for each
node pj, sq in the partition tree, we define a weight πj,s and dictionary density fj,s

as shown in figure 3.1(ii). Then, the conditional density f pyi |xi q will be a mixture
of densities with components depending on the sets contained in the path of xi (see
figure 3.1(iv)). In the extreme case in which two predictor values x and x1 belong to
the same leaf partition sets, the conditional distributions f py 1 |x1 q and f py |xq will be
identical. If the two paths differ only in the final generation or two, the conditional
densities will typically be similar but not identical.
3.1.2

Model Specification

Assuming that the number of levels in the partition tree is k, we define the conditional density f py |xq as the convex combination of densities tfj,sj pxq ukj1 with weights

tπj,s pxqukj1, i.e.
j

f py |xq 

k
¸



πj,sj pxq fj,sj pxq ,

(3.2)

j 1

with sj pxq being the subset located at level j containing x, pπj,sj pxq , fj,sj pxq q being
the weight and dictionary density associated to node pj, sj pxqq, 0

°k

¤

πj,sj pxq and

 πj,sj pxq  1. According to model 3.2, only observations with predictors allocated

j 1

to node pj, sq, i.e. tyi : xi

P Cj,su, will have a mixture components with weight πj,s
32

C11

(i)

@
R
@

C21

C31

rp21 , f21 s

C22

@
R
@

@
R
@

C32 C33
...

rp11 , f11 s

(ii)

@
R
@

rp22 , f22 s

@
R
@

rp31 , f31 s rp32 , f32 s

C34
...

...

@
R
@

...
...

C11

(iii)

xi

@
R
@

PC

C22

@
R
@

C33
...
(iv)

...

f pyi |xi q  p11 f11

p22 f22

p33 f33

...

Figure 3.1: Partition tree schematic: (i) Multiscale partition of the data. (ii)
Estimate dictionary density and weight associated to each set. (iii) Nodes along the
tree containing xi P <p . (iv) Conditional density of yi given xi defined as a convex
combination of densities associated to the nodes containing xi .

33

and density fj,s . Notice that, as the weight associated to the first level of resolution
approaches one, a non predictor-dependent density for y is obtained.
According to model (3.2), one observation can lie in subsets located at different
resolution levels. This is critical in achieving a good compromise between bias and
variance through borrowing information across different resolution levels. Though
the proposed approach is reminiscent of a mixture of experts model (Jacobs et al.,
1991), the two approaches are quite different, since under (3.2), neither mixture
weights nor dictionary densities directly depend on predictors. This allows our model
to scale efficiently to high dimensional predictors.
We let weights in 3.2 be generated by a stick-breaking process (Sethuraman,
1994b). For each node pj, sq in the partition tree, we define a stick length Vj,s
Betap1, αq. Then, we define weights in 3.2 as follows
πj,s

 Vj,s

¹

pj 1 ,s1 qPAj,s

r1  Vj1,s1 s ,

for j



k

 1 for all s P t1, . . . , Kk u. This condition will
 1 for any path s  ts1, . . . , sk u. We refer to this prior as a

with Aj,s defined as in 3.1 and Vk,s
ensure that,

°k

 πj,sj

j 1

multiresolution stick-breaking process. The parameter α encodes the complexity of
the model, with α  0 corresponding to the case in which f py |xq  f py q.

3.2 Estimation
We desire a strategy that estimates posteriors over all potential marginal distributions so as to automatically obtain estimates of uncertainty. Moreover, we would
like a procedure with a few hyper-parameters as possible. These motivate using a
fully Bayesian strategy. A fully Bayesian approach would construct a large number of partitions, and integrate over them to obtain our posteriors. However, such a
fully Bayesian is computational intractable for the ultrahigh-dimensionality problems
34

that motivate this work (p

P Op106q), so we adopt a hybrid strategy.

This hybrid

strategy is based on a two stage algorithm where first the observations are allocated
to different subsets in a tree fashion using an efficient partitioning algorithm and
then, considering the partition as fixed, a multiresolution stick-breaking process is
estimated using Bayesian methods.
Specifically, we employ METIS (Karypis and Kumar, 1999), a well-known relatively efficient graph partitioning algorithm with demonstrably good empirical performance on a wide range of graphs. We construct a weighted graph as done for the
construction of diffusion maps (Coifman and Lafon, 2006). In practice, we add an
edge between each pairs pxv , xu q and assign to any such edge weight eρuv , where ρuv
2

is a given metric. In all applications below, ρuv is defined as the Euclidean distance
between predictors xu and xv . Starting from the coarse scale, subsets will be split
using METIS until the number of observations in the subsets located at the finest
scale will drop below some chosen threshold τ . More formally let us define the number of levels k as the one satisfying the following conditions
°n

 1pxi P Cj,sj q ¥ τ ,

@Cj,s

i 1

°n

 1pxi P Ck

i 1

1,sk

1

q

j

τ,

f.s. sk

with j
1

¤k

P t1, . . . , Kk 1u

where 1pq is the indicator function and n is the number of observations. The above
conditions imply that each subset located at the finest scale will have at least τ
observations. Once the tree is constructed, we define the conditional density of yi as
the mixture density in 3.2. Though more complicated densities can be considered,
dictionary densities fj,s will be estimated by assuming a normal form, i.e. fj,s



N pµj,s , σj,s q. In particular, densities corresponding to a particular partition set will

be estimated considering only observations belonging to that partition set. To be
specific, for estimating density fj,s , we use observations Yj,s
35

 tyi : xi P Cj,su.

3.2.1

Full Conditionals

Parameters involved in the dictionary densities can be estimated using either frequentist or Bayesian methods. Bayesian methods are appealing since they can avoid
singularities associated with traditional maximum likelihood inference, the prior has
an appealing role as a regularizer, and we can characterize uncertainty in dictionary
learning through the resulting posterior. Hence, parameters involved in dictionary
densities will be estimated through Bayesian methods and inference on stick breaking weights and dictionary density parameters will be carried out using the Gibbs
sampler.
For this purpose, introduce the latent variable Si

P t1, . . . , ku, for i P t1, . . . , nu,

denoting the multiscale level used by the ith subject. Assuming data are normalized

 N p0, I q and σj,s  IG pa, bq for the means and variances of the dictionary densities associated to node pj, sq. Let nj,s be the number of
°
observations allocated to node pj, sq, i.e. nj,s  ni1 1pxi P Cj,s q1pSi  j q. Define
Ij,s  ti : xi P Cj,s , Si  j u. Each Gibbs sampler iteration can be summarized in the
prior to analysis, we let µj,s

following steps.

Step 1. Update Si by sampling from the multinomial full conditional with
ppSi

 j | q  °k πj,s px qfj,s px qpyiq
h1 πh,s px q fh,s px q pyi q
j

i

h

Step 2. Update Vj,s , for all s P t1, . . . , Kj u and j
p pVj,s |q  Betapβp , αp q,

βp

1

j

i

i

h

i

P t1, . . . , ku, by sampling from
nj,s

αp

α

¸

P p q

n`

` D j,s

Step 3. Update µj,s , for all s P t1, . . . , Kj u and j

P t1, . . . , ku, by sampling from

ppµj,s |q  N pMj,s nj,s {σj,s ȳj,s , Mj,s q
36

with Mj,s

 p1

nj,s {σj,s q1 , ȳj,s

 °iPI

j,s

yi .

Step 4. Update σj,s , for all s P t1, . . . , Kj u and j
ppσj,s |q  IG pa
where s̄ 

3.2.2

°

P

i Ij,s

P t1, . . . , ku, by sampling from

nj,s {2, b

pyi  µj,sq2.

Predictions

Consider the case we want to predict the response yn
on predictors xn
y pnq

s̄{2q

1

 py1, . . . , ynq.

1

for a future observation based

and previous observations pxpnq , y pnq q with xpnq

 px1, . . . , xnq and

Because the partitioning strategy that we adopted lacks an el-

egant out-of-sample embedding function (unlike other partitioning strategies), we
adopt a Voronoi expansion procedure by which the new vector of features xn

1

is al-

located to Cj,k ’s having the closest centers with respect to some metric ρ. Summaries
of the predictive density of yn
(i) for each scale j

1

will be computed as follows:

¤ k, allocate predictors xn

1

to Cj,k ’s having the closest centers

with respect to ρ
(ii) run the Gibbs sampler for H iterations, and at the hth iteration:
!

a) sample parameters

phq phq phq

)

σj,s , µj,s , πj,s

@j,@s

from the posterior, following the

procedure explained in §3.2.1
b) sample ŷnh

1

from

ŷns 1



k
¸



j 1



phq

phq

phq

πj,spxn 1 q N µj,spxn 1 q , σj,spxn 1 q

(iii) given the sequence ŷnh

(H
1 h 1,



summaries of the predictive density of the

response variable such as mean, variance and quantiles can be computed.

37

3.3 Simulation Studies
In order to assess the predictive performance of the proposed model, different simulation scenarios were considered. Let n be the number of observations, y

P < the

response variable and x P <p a set of predictors. The Gibbs sampler was run consid-

ering 20, 000 as the maximum number of iterations with a burn-in of 1, 000. Gibbs
sampler chains were stopped testing normality of normalized averages of functions of
the Markov chain (Chauveau and Diebolt, 1998). Parameters pa, bq and α involved

in the prior density of parameters σj,s s and Vj,s s were set respectively equal to p3, 1q
and 1. The threshold τ used to determine the number of levels was set equal to
5. Let the metric utilized to allocate new predictors (defined as ρ in §3.2.2) be the
Euclidean distance.
In all simulation scenarios, predictors were assumed to belong to an r-dimensional
space, either a lower dimensional plane or a non linear manifold, with r

p. For

each synthetic dataset, the proposed model was compared with CART and lasso in
terms of mean squared error. For CART and Lasso standard Matlab packages were
utilized and the regularization parameter of Lasso was chosen based on the AIC.
3.3.1

Illustrative Example

Consider
xi
where Ψ

 N pψpµiq, σ2I q,

 tψ : M Ñ <pu, µi P M, σ P p0, 8q, I is the p  p dimensional identity

matrix. Let M be a smooth compact Riemannian manifold. For simplicity, let us
assume that M is a curve. Let ψ pµq



1µ with 1 being a p-dimensional vector

with all elements equal to 1. Define the conditional f py |xq as a function of µ, i.e.

a mixture density with mixture weights depending on µ. We will show that our
construction facilitates an estimate of the density of y.
38

Specifically, we created an equally spaced grid of points ti
we let ηi
xij

 ηi

P t0, . . . , 20u.

Then,

 sinptiq and predictors be a linear function of ηi plus Gaussian noise, i.e.
ij with ij  N p0, 0.1q for j P t1, . . . , pu. In particular, we set p  1, 000.

The response was drawn from the following mixture of Gaussians
yi
with wi

 |ηi|.

 wiN p2, 1q p1  wiqN p2, 1q

(3.3)

Figure 3.2 shows the estimated density of four data points. These

estimates were obtained by performing leave-one-out prediction for different number
of observations in the training set. As the figure clearly shows our construction
facilitates an estimate of the density y approaching the true density as the number
of observations in the training set increases.
3.3.2

Linear Lower Dimensional Space

In this section, the vector of predictors is assumed to lie close to a lower dimensional
plane. In practice, predictors were modeled through a factor model as follows

xi
with Σ0

 Ληi

i

i

 Npp0, Σ0q

ηi

 Nr p0, I q

 diagpσ1, . . . , σpq, Λ being a p  r matrix and r

(3.4)
p. In the first

simulation scenario the response y was assumed to be a function of the latent variable
η so that the dependence between response and predictors was induced by the shared
dependence on the latent factors. In practice, the vector zi

 pyi, xTi qT

was jointly

sampled from a factor model. The loading matrix was derived as the product of a
matrix with orthogonal columns and a diagonal matrix with positive elements on the
diagonal, i.e. Λ  ΓΘ. In particular, the columns of Γ were uniformly sampled from
the Stiefel manifold while the diagonal matrix of Θ were sampled from an inverse
Gamma with shape and rate parameters p1, 4q.

39

(Ia)

(Ib)

0.5
0
−4

0.5

−2

0

2

4

0
−4

0.5

−2

(IIa)

−2

0

2

4

0

2

4

0
−4

−2

0

2

4

0
−4

2

4

0
−4

0

2

4

−2

0

2

4

2

4

2

4

(IIIc)

0.5

−2

0

2

4

0
−4

−2

0
(IVc)

0.5

0

0
−4

(IVb)

0.5

−2

−2

(IIc)

0.5

−2

0
−4

0.5

(IVa)

f(y|x)

4

(IIIb)

0.5

0
−4

2

0.5

(IIIa)

0
−4

0
(IIb)

0.5

0
−4

(Ic)

0.5

−2

0

2

4

0
−4

−2

0

y

Figure 3.2: Illustrative example: Plot of true density (red line) and estimated
density (50th percentile: solid line, 2.5th and 97.5th percentiles: dashed lines) for
four data points pI, II, III, IV q considering different training set size (a:100, b:200,
c:300).

In the second simulation scenario, x was sampled from the factor model above,
while y was sampled from a normal with location and scale parameter p1, 1q if the

¡ 0, and from a normal with location and scale
p1, 1q otherwise. In both examples, an inverse Gamma prior with parameters p1, 4q
were utilized for σj with j P t1, . . . , pu.
first variable was positive, i.e. x1

40

3.3.3

Non-Linear Lower Dimensional Space

In this section predictors were assumed to lie close to a lower dimensional non-linear
manifold. In the first simulation study, predictors and response were jointly sampled
from an N components mixture of factor analyzers so that the vector of predictors
and response were assumed to lie close to N lower dimensional planes. For each
mixture components, the loading matrix and variances were sampled as in the first
simulation scenario in §3.3.2, while mixture weights were sampled from a Dirichlet
distribution with parameter αj

 1 for j P t1, . . . , N u. The number of latent factors

was considered to be increasing in the number of components. In particular, we let
the hth mixture component be modeled through h factors.
In the other two simulation scenarios predictors were assumed to lie close to the
Swissroll and the S-manifold, all two dimensional manifold embedded in <p , while
the response was sampled from a normal with mean equal to one of the coordinates
of the manifold and standard deviation one. Figure 3.3 shows the Swissroll and the
S-manifold embedded in <3 .

Figure 3.3: Swissroll-Manifold and S-Manifold embedded in R3

41

3.3.4

Results

For each simulation scenario in §3.3.2 and §3.3.3, we sampled M



20 datasets

involving up to 300 observations and for each method we performed leave-one-out
predictions. Table 3.1, 3.2, 3.3 and 3.4 show mean squared errors under the proposed
approach, CART and lasso for each data scenario. As shown, in almost all data
scenarios, our model is able to perform as well as or better than the model associated
to the lowest mean squared error. In particular, when the response is a non linear
function of predictors, CART performs better than Lasso (table 3.2), while when a
linear relationship is assumed lasso outperforms CART ( table 3.1, 3.3, and 3.4). The
tables also report the mean of CPU usage to predict a single point as a function of the
number of features. In particular, CPU time is expressed in seconds and codes have
been running on our workstation (Intel Core i7-2600K Quad-Core Processor memory
8192 MB). Clearly, the proposed model scale substantially better than others to high
dimensional predictors.
Beside running simulations and reporting the distribution of performance for each
W
algorithm, we compare the algorithms per simulation. Define rm
defined as
W
rm

 φpM SB q{φpW q,

where φ is the quantity of interest (for example, CPU time in seconds or mean
squared error), MSB is our approach and W is the competitor algorithm. To obtain
mean-squared error estimates from MSB, we select our posterior mean as a pointestimate (the comparison algorithms do not generate posterior predictions, only point
estimates). For each simulation scenario, we sampled multiple datasets and compute
W
the matched distribution of rm
. This provides a much more informative indication of

algorithmic performance, in that we indicate the fraction of simulations one algorithm
outperforms another on some metric. This is akin to power gained by matched twosample tests. For each example, we sampled 20 datasets to obtain estimates of the
42

W
distribution over rm
.

Figures 3.4 and 3.5 depict the relative mean-squared error and CPU time in seconds of our approach, versus CART (red) and Lasso (black) for different simulation
scenarios. The three simulation scenarios are: linear subspaces, union of linear subspaces (MFA) and the swissroll. MSB outperforms both CART and Lasso in all
W
three scenarios regardless of ambient dimension (rmse

1 for all p).

Figure 3.4: Numerical results for various simulation scenarios. Top plot depicts
the relative mean-squared error of MSB (our approach), versus CART (red) and
Lasso (black) as a function of ambient dimension of x. Bottom plot depicts the
ratio of CPU time as a function of ambient dimension of x. The simulation scenario
considered is the linear subspace. MSB outperforms both CART and Lasso regardless
W
of ambient dimension (rmse
1 for all p). MSB compute time is relatively constant
as p increases, whereas Lasso’s compute time increases, thus, as n or p increase,
MSB CPU time becomes less than Lasso’s. MSB was always significantly faster than
CART and PC regression, regardless of n or p. For all panels, n  100 when p varies,
and p  300k when n varies, where k indicates 1000, e.g., 300k 3  105 .

43

Figure 3.5: Numerical results for various simulation scenarios. Top plots depict
the relative mean-squared error of MSB (our approach), versus CART (red) and
Lasso (black) as a function of ambient dimension of x. Bottom plots depict the
ratio of CPU time as a function of sample size. The two simulation scenarios are:
MFA (left) and Swissroll (right). MSB outperforms both CART and Lasso in all two
W
1 for all p). MSB compute time
scenarios regardless of ambient dimension (rmse
is relatively constant as n or p increase, whereas Lasso’s compute time increases,
thus, as n or p increase, MSB CPU time becomes less than Lasso’s. MSB was always
significantly faster than CART and PC regression, regardless of n or p. For all panels,
n  100 when p varies, and p  300k when n varies, where k indicates 1000, e.g.,
300k 3  105 .

3.4 Real Application
We assessed the predictive performance of the proposed method on two very different
neuroimaging datasets. First, we consider a structural connectome dataset collected
at the Mind Research Network. Data were collected as described in Jung et al. (2010).

44

For the analysis, all variables were normalized by subtracting the mean and dividing
by the standard deviation. The prior specification and Gibbs sampler described in
§3.3 were utilized.
In the first experiment we investigated the extent to which we could predict
creativity (as measured via the Composite Creativity Index (Arden et al., 2010)).
For each subject, we estimate a 70 vertex undirected weighted brain-graph using
the Magnetic Resonance Connectome Automated Pipeline (Gray et al., 2010) from
diffusion tensor imaging data (Mori and Zhang, 2006). Because our graphs are
undirected and lack self-loops, we have a total of p 



70
2

 2, 415 potential weighted

edges. The p-dimensional feature vector consists of the natural logarithm of the
weight for each edge.
The second dataset comes from a resting-state functional magnetic resonance
experiment as part of the Autism Brain Imaging Data Exchange. We selected the
Yale Child Study Center for analysis. Each brain-image was processed using the
Configurable Pipeline for Analysis of Connectomes (Sikka et al., 2012). For each
subject, we computed a measure of normalized power at each voxel called fALFF (Zou
et al., 2008). To ensure the existence of nonlinear signal relating these predictors, we
let yi correspond to an estimate of overall head motion in the scanner, called mean
framewise displacement (FD) computed as described in Power et al. (2012). In total,
there were p  902, 629 voxels.
Table 3.5 shows mean and variance squared error based on leave-one-out predictions. For each data example, we report the mean and standard deviation (s.d.)
across subjects of squared error, and CPU time (in seconds). For the first data example, we compared our approach (multiscale stick-breaking; MSB) to CART, lasso
and random forests. Table 3.5 shows that MSB outperforms all the competitors in
terms of mean square error; this is in addition to yielding an estimate of the entire
conditional density for each yi . It is also significantly faster that random forests, the
45

next closest competitor, and faster than lasso. For this relatively low-dimensional
example, CART is reasonably fast. For the second data application, given the huge
dimensionality of the predictor space, we were unable to get either CART or random
forest to run to completion, yielding memory faults on our workstation (Intel Core
i7-2600K Quad-Core Processor memory 8192 MB). We thus only compare performance to lasso. As in the previous example, MSB outperforms lasso in terms of
predictive accuracy measured via mean-squared error, and significantly outperforms
lasso in terms of computational time.

46

Table 3.1: Linear manifold example 1: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for sample size 50
and 100 for different simulation scenarios. Variable time indicates the mean of CPU
usage to predict a single point, p is the dimensionality of the predictor space, n is the
sample size and k indicates 1, 000, i.e. 300k=300,0000. Bold indicates best MSE,
 indicates best CPU time. As shown, MSB outperforms both CART and Lasso
regardless of ambient dimension and sample size.

p

n
mse

10k

50
time

100k

0.25

0.22

0.58

0.22

(0.32)

(0.30)

(0.42)

(0.24)

(0.54)

(0.30)

3

2

3

3

1

0.26

0.20

0.41

0.52

(0.46)

(0.78)

time

5

5

2

(0.23)

5

5

1

mse

0.35

0.45

0.89

0.16

0.33

0.20

(0.53)

(0.77)

(1.04)

(0.21)

(0.46)

(0.31)

3

25

13

27

50

2

2

0.43

0.88

0.52

0.17

0.50

0.31

(0.59)

(1.29)

(0.70)

(0.75)

(0.49)

time

7

50

5

(0.24)

7

51

5

mse

0.11

0.16

0.15

0.83

2.26

0.92

(0.15)

(0.24)

(0.19)

(1.01)

(2.60)

(3.69)

90

11

121

10

100

50

100

5

5

0.003

0.17

0.08

0.13

1.37

1.06

(0.16)

(0.13)

(1.12)

(1.50)

214

43

8

(1.80)

time

10

(0.23)

227

42

mse

1.70

1.48

1.47

0.66

1.65

1.07

(2.18)

(2.47)

(1.63)

(0.87)

(1.49)

(0.95)

121

12

151

13

50
time
mse

500k

0.31

(0.46)

mse

700k

0.18

1

r  10
cart lasso

0.27

time

500k

msb

(0.42)

mse

500k

lasso

0.18

100

time

100k

r5
cart

(0.26)

mse

10k

msb

100
time

6

7

0.69

1.36

0.82

0.78

1.52

1.43

(0.94)

(1.47)

(1.28)

(1.03)

(1.34)

(2.11)

321

41

325

44

13

47

12

Table 3.2: Linear manifold example 2: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for sample size 50
and 100. Variable time indicates the mean of CPU usage to predict a single point,
p is the dimensionality of the predictor space, n is the sample size and k indicates
1, 000, i.e. 300k=300,0000. In this case, given the non-linear relationship between
response and predictors, CART outperforms Lasso. However, our model results in
the lowest mean squared errors.

msb

r2
cart

lasso

msb

r5
cart

lasso

1.54

1.78

2.37

0.84

1.25

1.62

(1.70)

(1.72)

(0.89)

(1.38)

(1.35)

(1.47)

0.76

0.97

1.77

0.88

1.53

1.43

(1.04)

(1.21)

(3.13)

(1.00)

(1.59)

(2.73)

0.77

1.01

1.61

0.67

0.46

0.97

(0.94)

(1.13)

(1.85)

(0.82)

(0.61)

(1.16)

p

n

10k

100

mse
std

50k

100

mse
std

100k

100

mse
std

200k

100

mse
std

0.86

0.90

1.41

0.74

1.09

0.78

(1.30)

(1.35)

(1.41)

(0.95)

(1.98)

(0.95)

48

Table 3.3: Non-linear manifold - MFA: Mean and standard deviations of squared
errors under multiscale stick-breaking (MSB), CART and Lasso for sample size 50
and 100 for different simulations sampled from a mixture of factor analyzers. Variable
time indicates the mean of CPU usage to predict a single point, p is the dimensionality
of the predictor space, n is the sample size and k indicates 1, 000, i.e. 300k=300,0000.
Bold indicates best MSE,  indicates best CPU time. As shown, MSB outperforms
both CART and Lasso regardless of ambient dimension and sample size.

p

50k

n

msb

mse

0.23

0.42

(0.34)

(0.59)

5

24

100
time

100k

0.17

0.43

0.22

(0.43)

(0.18)

(0.69)

(0.23)

7

27

3

3

0.27

0.17

0.22

0.20

(0.23)

(0.38)

(0.25)

time

10

51

8

(0.19)

12

56

7

mse

0.67

1.35

1.32

0.15

0.17

0.22

(1.04)

(2.26)

(1.36)

(0.23)

(0.19)

(0.23)

9

47

6

44

100

200

6

5

0.64

1.37

0.85

0.15

0.26

0.15

(0.95)

(1.29)

(0.24)

(0.24)

99

15

11

(0.42)

time

14

(1.77)

89

15

mse

0.26

0.39

0.31

0.63

1.40

1.01

(0.39)

(0.51)

(0.52)

(0.80)

(1.24)

(1.46)

125

18

145

17

100

mse

300k

0.36

0.42

time

300k

lasso

(0.56)

mse

300k

N 5
cart

0.23

200

time

100k

msb

(0.33)

mse
50k

N  10
cart lasso

sim

200

9

9

0.25

0.47

0.26

0.63

1.17

0.92

(0.36)

(0.43)

(0.80)

(1.04)

262

40

13

(2.11)

time

15

(0.88)

283

43

mse

0.25

0.30

0.30

0.62

1.42

0.70

(0.36)

(0.41)

(0.48)

(0.89)

(1.85)

(0.94)

463

73

465

89

300
time

15

49

16

Table 3.4: Non-linear manifold - Swissroll and S-Manifold: Mean and standard deviations of squared errors under multiscale stick-breaking (MSB), CART and Lasso
for sample size 50 and 100 for different simulation scenarios. Variable time indicates
the mean of CPU usage to predict a single point, p is the dimensionality of the predictor space, n is the sample size and k indicates 1, 000, i.e. 300k=300,0000. Bold
indicates best MSE,  indicates best CPU time. As shown, MSB outperforms both
CART and Lasso regardless of ambient dimension and sample size.

p

n

msb
mse

100k

50
time
mse

100k

200k

100

0.44

0.25

0.38

0.38

0.84

(0.24)

(0.42)

(0.29)

(0.40)

(0.35)

(0.80)

3

22

5

7

2

1

0.24

0.43

0.17

0.25

0.30

0.70

(0.26)

(0.22)

(0.22)

(0.50)

time

6

48

7

7

50

7

mse

0.24

0.67

0.29

0.35

0.40

0.73

(0.23)

(0.50)

(0.29)

(0.22)

(0.30)

(0.40)

38

5

40

5

50

100

4

3

0.25

0.78

0.33

0.37

0.37

0.70

(0.26)

(0.36)

(0.25)

(0.55)

96

13

6

(0.27)

time

6

(0.74)

98

14

mse

0.17

0.47

0.23

0.16

0.20

0.35

(0.23)

(0.43)

(0.22)

(0.20)

(0.19)

(0.40)

126

10

130

15

50
time
mse

500k

0.24

(0.25)

mse

500k

S-Manifold
msb
cart lasso

(0.55)

time

200k

Swissroll
cart lasso

100
time

5

5

0.17

0.33

0.19

0.11

0.25

0.56

(0.21)

(0.46)

(0.23)

(0.14)

(0.20)

(0.61)

230

25

254

27

11

50

10

Table 3.5: Neuroscience application quantitative performance comparisons. Squared
error predictive accuracy per subject (using leave-one-out) was computed. We report
the mean and standard deviation (s.d.) across subjects of squared error, and CPU
time (in seconds). We compare multiscale stick-breaking (MSB), CART, Lasso and
random forest (RF). MSB outperforms all the competitors in terms of predictive
accuracy and scalability. Only MSB and Lasso even ran for the  106 dimensional
application. Bold indicates best MSE,  indicates best CPU time.

data
creativity

n
108

p
2,415

model
MSB
CART
Lasso
RF

mse (s.d.)
0.56 p0.85q
1.10 p1.00q
0.63 p0.95q
0.57p0.90q

time (s.d.)
1.1 p0.02q
0.9 p0.01q
0.40 p0.10q
78.2 p0.59q

movement

56

 106

MSB
Lasso

0.76 p0.90q
1.02 p0.98q

20.98 p2.31q
96.18 p9.66q

51

4
Bayesian factor trees

In this chapter, we focus on the problem of modeling the density of a vector of obser-

P Y  <p given a set of predictors x P X  <q . One natural approach to
estimating conditional multivariate densities is to let z  py T , xT qT and then model
vations y

the combined vector as iid from an unknown density g, with the conditional density
f py |xq obtained as a byproduct. This joint modeling trick has been widely used for
univariate response (Muller et al., 1996; Shahbaba and Neal, 2009; Hannah et al.,
2011), and is just as applicable in the multivariate case. To characterize the unknown
density g pz q, one can use a mixture of multivariate Gaussian densities. However, as
p

q increases, the curse of dimensionality prevents one from obtaining adequate

performance. This problem can be overcome by incorporating dimensionality reduction within each component by using a factor model, leading to a mixture of factor
analyzers (MFA) (Tipping and Bishop, 1997). Under MFA the pp

q q-dimensional

vector is modeled as
g pz q 

»

Np

q

z |µ, ΛΛT



Σ dP pµ, Λ, Σq

(4.1)

Model 4.1 can efficiently characterize the density of high-dimensional observations,
52

while conducting dimensionality reduction through learning the lower-dimensional
data manifold using a piecewise planar approximation (Chen et al., 2010). Unfortunately, using the joint modeling trick to induce an estimate for f py |xq from an

estimate for g pz q, with z

 pyT , xT qT , tends to have poor performance in practice,

particularly when x is higher dimensional than y. One pays a heavy computational
price for estimating the high-dimensional nuisance parameter corresponding to the
marginal density of x, and additionally learning of a parsimonious low-dimensional
structure tends to be driven largely by the x marginal, leading to relatively poor performance in estimating f py |xq. One can alternatively use (4.1) for the conditional

density f py |xq directly, with x dependence incorporated in the mixing measure or
factor analytic parameters. This can be accomplished using previous nonparametric
Bayes machinery (Ren et al., 2011; Rodriguez and Dunson, 2011; Hatjispyros et al.,
2011). However, as p and q increase, computation rapidly becomes prohibitively
slow. In this chapter, we propose a Bayesian factor tree model that can flexibly and
efficiently learn the density of a p dimensional response given an high dimensional
vector of features.

4.1 Methodology
4.1.1

Model Structure

We aim to reduce dimensionality for tractability in building a flexible and scalable
model for the predictor-dependent density of y

P <p. The density of y will depend on

covariates through the multiscale representation of the data presented in §3.1.1 (refer
to this section for further details). Given the multiscale partition, the conditional
density f py |xq is defined as
f py |xq 

k
¸



πj,sj pxq fj,sj pxq ,

j 1

53

(4.2)

¤ πj,s pxq and °kj1 πj,s pxq  1. The dictionary densities are chosen as multivariate normal, fj,s  Np pµj,s , Ψj,s q, with a factor analytic form chosen for the
with 0

j

j

j

j

j

covariance to reduce dimensionality
Ψj,sj

 Θj,s ΘTj,s
j

with Θj,sj being a p  `j,sj matrix and Σj,sj

j

Σj,sj

 diag

(4.3)



p
1
σj,s
, . . . , σj,s
. The covariance
j
j

decomposition in 4.3 can be induced through the latent factor model
yi

 µj,s

j

Θj,sj ηi

i ,

ηi

 N` p0, I q,
j,sj

i

 Npp0, Σj,s q.
j

(4.4)

Therefore, for each node pj, sj q, fj,sj will be induced marginalizing out the latent
variable ηi in the factor model specific to that node. The number of columns of Θj,sj
(number of factors) varies across nodes and is estimated through an adaptive Gibbs
sampler (see §4.2.2).
For the probability weights on the dictionary densities corresponding to each path
through the tree, we choose the novel stick-breaking process defined in chapter 3. For
each node pj, sj q in the partition tree, define a stick length Vj,sj

 Betap1, αq for nodes

pj, sj q located from generation 1 to k  1. The parameter α encodes the complexity
of the model, with α  0 corresponding to the case in which f py |xq  f py q. We
relate the weights in (4.2) to the stick-breaking random variables as follows:
πj,sj

 Vj,s

j

¹

P p

ζ A j,sj

q

r1  Vζ s ,

 1 for any sj P t1, . . . , Kj u. This condition will ensure that °kj1 πj,s  1
for any path ts1 , . . . , sk u.
with Vk,sj

j

54

4.2 Estimation
We first partition observations in a tree fashion applying recursively METIS (Karypis
and Kumar, 1999) until the stopping criteria presented in chapter 3 is satisfied (refer to section §3.2 for further details). Then, the sequence of dictionary densities

tfj,s u and stick-breaking weights tVj,s u are estimated using Bayesian methods and
j

j

inference is carried out using the Gibbs sampler. Under model 4.4, estimating the
(

sequence of dictionary densities is equivalent to estimate sequences Λj,sj , µj,sj

(

(

and Σj,sj .
4.2.1

Prior Specification

Following Bhattacharya and Dunson (2011), we will consider a shrinkage priors for
hι
as the ph, ιq element of Θj,sj
the columns of the factor loadings in 4.4. Define θj,s
j

and consider the following prior specification

phιq  N
θ
j,sj



pιq
0, pιq phιq , τj,sj
τj,sj ρj,sj

phιq  Gapa , a q, φp1q
1 2
j,sj

ρj,sj

Choosing a4

1

phq

 Gapa3, 1q,

¡ 1 implies that τj,spιq

j

φj,sj



ι
¹



pdq

φj,sj

d 1

 Gapa4, 1q @h ¡ 1

stochastically increases with ι, shrinking the

elements of Θj,sj toward zero increasingly as the number of columns grows. This
prior specification allows an adaptive choice of the number of factors. We assign a
standard normal density for the intercept parameter µj,sj associated to each node

pj, sj q, i.e. µj,s  Npp0, I q. Finally, we specify the prior for Σj,s via the usual inverse
phq
gamma priors on its diagonal elements, i.e. σj,s  IG pασ , βσ q for h P t1, . . . , pu.
j

j

j

55

4.2.2

Selection of the Number of Factors

In order to select the number of factors, we directly apply the method proposed by
Bhattacharya and Dunson (2011). Basically, the number of factors will be adapted
as the Gibbs sampler progresses, with adaptation designed to satisfy the diminishing adaptation condition in Theorem 5 of Roberts and Rosenthal (2007). Directly
following Bhattacharya and Dunson (2011), at the hth iteration, adaptation occurs
with probability pphq

 exp ppt1

t2 hqq and pt1 , t2 q chosen such that adaptation

occurs every ten iterations at the beginning of the chain and decreases exponentially
in the number of iterations. When adaption occurs, the number of columns having
all elements in some a priori chosen neighborhood of zero, i.e.

p˜, ˜q with ˜ close

to zero, are counted. We can intuitively assume that the factors corresponding to
such columns have a negligible contribution, therefore we discard these columns and
continue the sampler with a reduced number of factors. Otherwise, if the number of
such columns drops to zero we may be missing important factors, therefore we add
a column to the loading. The other parameters are modified accordingly and, when
a factor is added, the new parameters are sampled from the prior. This adaptation
scheme was thought for a single factor model but it can be easily implemented for a
mixture of factor analyzers and consequently for our model. When adaptation occurs
columns of all loading matrices Θj,sj s will be monitored and the number of factors
of each loading will be either decreased or increased.
4.2.3

Full Conditionals and Gibbs Sampler Steps

For ease of explanation, we assume in this section a fixed number of factors. The
number of levels k and, consequently the number of subsets in T , strictly depends on
the number of observations. Therefore, especially for large sample sizes, the dimensionality of the parameter space may become huge and it may lead to computational
problems. To solve this computational issue, we implement the slice sampling al56

gorithms proposed by Kalli et al. (2011). For each observation a latent variable
u P r0, 1s is introduced and the vector py T , uqT is modeled as

f py, u|xq 

k
¸





πj,sj pxq fj,sj pxq ,

1 u

(4.5)

j 1

with 1pAq being equal to one if the event A occurs. Notice that marginalizing out
the latent variable u, the mixture density in 4.5 is recovered. Under model 4.5,
components with weights close to zero, and therefore considered unnecessary, will be

P t1, . . . , ku be the indicator variable indicating the
level used by observation yi . Define Ij,m  ti : gi  j, xi P Cj,m u with nj,m being the

automatically excluded. Let gi

cardinality of Ij,m . Considering model 4.5 and the prior specification in §4.2.1, the
Gibbs sampler iterates through the following steps.
Step 1. Sample ui for i P t1, . . . , nu
Prpui | q  U n 0, pgi ,sgi



phq the
 t1, . . . , ku and s P t1, . . . , Kj u, denote θj,s
phq
jth row of Θj,s and sample θj,s , for h P t1, . . . , pu from:
Step 2. For each node pj, sq, with j



phq | q  N

Prpθj,s

`j,s

D̄1
h

¸

P



phq  µphq

ηi y i

j,s

{σjphq, s, D̄h1

i Ij,s

phq



phq being the hth element of y , D̄
i
h

with µj,s being the hth element of µj,s , yi

Dh

phq

Ai {σj , s with Dh

 diag



ph1q p1q

phkq phq and A  °
T
i
iPIj,s ηi ηi .

ρj,s τj,s , . . . , ρj,s τj,s

Step 3. Update ηi , for i P t1, . . . , nu, from:
57





1
1
Prpηi | q  N`gi ,sgi D̄η1 ΘTgi ,sgi Σ
gi ,sgi pyi  µgi ,sgi q, D̄η

with D̄η





I

1
ΘTgi ,sgi Σ
gi ,sgi Θgi ,sgi .

phq

Step 4. Update σj,s , for h P t1, . . . , pu and j


 t1, . . . , ku and s P t1, . . . , Kj u, from:



phq | 

Pr σj,s

 IG aσ

¸ 

nj,s {2, bσ

phq  θphq η

yih  µj,s

P

j,s

2

i

i Ij,s

Step 5. Update µj,s , for j

 t1, . . . , ku and s P t1, . . . , Kj u, from


1
Pr pµj,s | q  Np  nj,s Σ
j,s

I

1 ¸

P

pyi  Θj,sηiq ,

1
nj,s Σ
j,s

I

1

i Ij,s

Step 6. Update gi by sampling from the multinomial full conditional with
Prpgi
with fj,sj pxi q

N



 j | q91



pj,sj pxi q fj,sj pxi q pyi q

ui

µj,sj pxi q , Θj,sj pxi q ΘTj,sj pxi q

Θj,sj pxi q

Step 7. Update stick-breaking random variable Vj,s from


PrpVj,s | q  Beta 1

nj,s , α

¸

P p q

nv

v D j,s

 1. Let Vk,s  1 for all s and let
±
πj,s  Vj,s υPApj,sq p1  Vυ q. In particular, Apj, sq and Dpj, sq are defined as the set
of ancestors and descendants of node pj, sq as in chapter 3.

for any set j, s located from tree level 1 to k

ph,ιq

Step 8. Update ρj,s , for h ¤ p, ι ¤ `j,s , j


ph,ιq
Prpρj,s | q  G a1

¤ k and s P t1, . . . , Kj u from

1{2, a2
58

i
τj,s



ph,ιq

θj,s

2

{2

Step 9. Update φ1j,s , j

¤ k and s P t1, . . . , Kj u from


p1q
Prpφj,s | q  G a3

d ¤ `j,s , j

Step 10. Update φdj,s , for 1


pdq
Prpφj,s | q  G a4

p`j,s {2, 1

p`j,s  d

p

¸
p
hq
p
whq
pwhq
τj,s
ρpjsq θj,s
w 1
h1
`j,s
¸

2

{2

¤ k and s P t1, . . . , Kj u from

1qp{2, 1

p

¸
p
hq
pw,hq pwhq
τj,s
ρpjsq θj,s
w 1
hd
`j,s
¸

2

{2

In order to proceed with the chain, it is not required to sample all pµj,s , Λj,s , Σj,s qs.
We only need to sample parameters necessary to do Step 6 exactly. Therefore,
only parameters involved in components with non-negligible weights will need to be
sampled. This will reduce dramatically the computational burden of the proposed
algorithm.

4.3 Synthetic Example
In the following simulation examples, we test the predictive performance of the proposed model relative to competing alternatives. We initially consider the case in
which xi is a two dimensional vector defined over a bounded set and then move to
the more general case in which xi

P <q . In all examples, the proposed model will be

compared to mixture of factor analyzers (MFA) and covariate dependent mixture of
factor analyzers (dMFA). The latter provides additional flexibility by allowing the
mixing weights to change flexibly with covariates. In particular, covariate dependent
weights will be modeled through the probit stick breaking process (Rodriguez and
Dunson, 2011). The three models will be compared in terms of mean squared error in leave-one-out cross validation. Predictions will be carried out using the same
methodology described in §3.2.2. We used 10, 000 Gibbs sampling iterations and a
burn-in of 1, 000. We set the hyperparameters at the following fixed non-optimized
59

values for all simulations and real data experiments and do not tune: a1

 a2  2,

 1, a4  4, ασ  1, βσ  0.3 and α  1. We set parameters used to select the
number of factors as ˜  0.01, t1  1 and t2  5  104 .

a3

4.3.1

Two Dimensional Predictors

We initially assume xi is sampled iid from a uniform distribution overr0, 1s2 . In
the first simulation scenario, yi is drawn from a feature-dependent Gaussian density.
Specifically,
yi

 Nppµ0pxiq, Ψ0pxiqq,

Ψ0 pxi q  Λ0 pxi qΛ0 pxi qT

with Λ0 being a p  `0 matrix, Σ0 a p  p identity matrix and `0

Σ0
p. We generated

µ0 pxi q and Λ0 pxi q as follows

pµ0hpx1q, . . . , µ0hpxnqq iid
 Nn p0, C pxqq ,


λ0js px1 q, . . . , λ0js pxn q

 Nn p0, C pxqq ,

iid

j

h P t1, . . . , pu

P t1, . . . , pu , s P t1, . . . , `0u

with µ0h pxi q and λ0js pxi q being respectively the hth element of µ0 pxi q and the pj, sqth

element of Λ0 pxi q. We define the pj, hqth element of C pxq as Cjh pxq  υ exptdpxj , xh qu
with dpxj , xh q being the Euclidean distance between vectors xj and xh , υ
the number of factors equal to `0

 5 or `0  10.

 2, and

In the second simulation scenario, yi is drawn from a mixture of factor analyzers
with feature-dependent mixture weights. Let k0

P t3, 5u be the number of mixture

components and let Φpq be the cumulative distribution function of the standard
normal density. Mixture weights were derived through a probit stick breaking specification (Rodriguez and Dunson, 2011). Model stick breaking weights as
π0j pxi q  V0j pxi q

j 1
¹



s 1

60

p1  V0spxiqq

with V0j pxi q
Λ0j Λ10j

 Φ pϑj1xi1

ϑj2 xi2 q for j

k0 and V0k0

 1.

Let µ0j and Ψ0j



Σ0j be respectively the intercept and the covariance of the jth mixture

component, with Λ0j being a p  `0 loading matrix and Σ0j a p  p diagonal matrix
with positive entries on the diagonal. In particular, sample each element of the

P t1, . . . , k0u, independently from a normal with mean m0j
and unitary variance. For k0  3, we set

loading Λ0j and µ0j , for j

m0
while for k0

 p2, 0, 2q

,

pϑ11, ϑ21q  p0.5, 0q

,

pϑ12, ϑ22q  p0.5, 0q

 5 we set
m0

 p2, 0, 2, 1, 1q

,

pϑ11, ϑ21, ϑ31, ϑ41q  p0.5, 0, 1, 1q

pϑ12, ϑ22, ϑ32, ϑ42q  p0.5, 0, 1, 1q
The diagonal elements of Σ0j are drawn from an inverse Gamma density with scale
and rate parameter equal to 5 and 3 respectively. The number of factors was set
equal to 5.
Table 4.1 shows mean squared errors based on leave-one-out predictions. In
essentially every case considered, our Bayesian factor trees (BFT) approach produced
the lowest MSE followed by dMFA, with MFA having the worst performance. In
the second simulation scenario, when observations are sampled from a dMFA, our
approach and dMFA perform similarly.
To visualize the performance of our model, we define a grid of 100 evenly spaced
points in U

 r0, 1s2.

We sampled yi

P <p with p  50 and i P U

from the above

three component mixture of factor analyzers. Figure 4.1 shows the true value and
the estimate of five variables in yi for each i

P U.

At each Markov Chain iteration,

we sampled the five variables conditionally on the other p  5 variables, then in figure
4.1 we plot the mean of those values over Markov chain iterations. As shown, the
proposed model performs similarly to dMFA in estimating elements of yi , while MFA
61

is not able to capture most of the spatial structure. The associated mean squared
errors were pˆ2M F A , ˆ2dM F A , ˆ2BF T q

 p0.33, 0.27, 0.27q, revealing that we were able to

perform similarly to dMFA.
Table 4.1: Two dimensional predictors: Mean and standard deviations of squared
errors under our bayesian factor tree (BFT), a mixture of factor analyzers (MFA)
and covariate dependent mixture of factor analyzers (dMFA) under the first (1) and
second (2) simulation scenario. Bold indicates best MSE. As shown, in almost all
data scenarios, BFT leads to the lowest MSE.

sim

p

n

bft

k0  3
mfa

dmfa

bft

k0  5
mfa

dmfa

(1)

100

50

0.11

0.15

0.11

0.14

0.19

0.20

(0.09)

( 0.12)

(0.07)

(0.08)

(0.17)

(0.15)

0.06

0.33

0.13

0.08

0.17

0.13

(0.02)

(0.46)

(0.06)

(0.03)

(0.14)

(0.07)

100

500

50

100

0.08

0.16

0.11

0.08

0.21

0.20

(0.06)

(0.12)

(0.13)

(0.06)

(0.16)

(0.11)

0.05

0.12

0.10

0.14

0.20

0.18

(0.05)

(0.11)

(0.09)

(0.14)

(0.16)

(0.16)

sim

p

n

bft

`0  5
mfa

dmfa

bft

(2)

100

100

0.14

0.25

0.25

0.26

0.27

0.29

(0.09)

(0.06)

(0.09)

(0.14)

(0.18)

(0.28)

0.16

0.20

0.19

0.17

0.19

0.19

(0.11)

(0.16)

(0.16)

(0.08)

(0.10)

(0.13)

0.14

0.16

0.15

0.22

0.23

0.26

(0.06)

(0.05)

(0.05)

(0.12)

(0.14)

(0.17)

200

500

100

200

`0  10
mfa
dmfa

0.11

0.15

0.12

0.25

0.26

0.19

(0.06)

(0.07)

(0.04)

(0.21)

(0.24)

(0.10)

62

x1

x1

x1

x2

x1

x2

x1

x2

x2

x1

x1

x2

x1

x2

x1

x2

x2

x1

x1

x2

x1

x2

x1

x2

x2

x1

x1

x2

x1

x2

x1

x2

x2

x1

BFT
x2

dMFA
x2

MFA
x2

x2

True value

x1

x1

Figure 4.1: True value and estimate under MFA, dMFA and BFT of five variables
of yi given xi  pxi1 , xi2 qT for i  t1, . . . , 100u. Each row correspond to a different
element of the response vector y, while each column correspond to a different method
utilized to predict y. As shown, BFT performs similarly to dMFA in estimating the
five elements of y, while a simple MFA (not depending on covariates) is not able to
capture most of the spatial structure.

4.3.2

Higher Dimensional Predictors

In this section we consider examples involving a large number of predictors. In all
scenarios, the response variable yi was sampled from a mixture of factor analyzers
with feature-dependent weights (see §4.3.1). Two different models are considered for
the feature vector. First, we assume xi
as Ψsj

 Nq p0, Ψq, with ps, j q-element of Ψ defined

 j, s%|sj|, %  0.9 and j, s  1.

Given xi , yi is sampled from a mixture of
63

factor analyzers with stick breaking weights depending only on the first covariate xi1 ,
i.e. V0j pxi q

 Φpϑj xi1q for j

k0 and V0k0 pxi q

 1.

In the second data scenario, xi

is sampled from the Swissroll manifold, a two dimensional manifold embedded in <q
(see figure 3.3(a)). In this case, stick breaking weights are assumed to depend only
on one coordinate of the Swissroll, i.e. V0j pxi q  Φpϑj si1 q for j

k0 and V0k0 pxi q  1

with si1 being a coordinate of the manifold. For both scenarios, we consider k0
and pϑ1 , ϑ2 q

 p2, 2q.

3

The intercepts and loading matrices are drawn considering

the same model as in §4.3.1.
We sampled 20 datasets for each data scenario. Table 4.2 shows mean squared
errors based on leave-one-out predictions under experiments involving different combination of pn, p, q q. As shown, in almost all data scenarios, our model is able to
perform as well as or better than the model associated to the lowest mean squared
error. As expected, the dependent MFA leads to better MSE compared to MFA.
Figure 4.2 shows the relative CPU time of our approach versus dMFA. The relaA
tive CPU time was computed as in chapter 3, i.e. rm

 φpM SB q{φpAq, where φ

is the CPU time in seconds and A is the competitor algorithm. As shown, our
approach can scale substantially better than dMFA to large number of predictors.
Notice, that in this section we have considered examples involving few thousands of
predictors. However, in many real world applications the number of predictors can
grow up to hundreds of thousands. In this framework, a dependent MFA becomes
computationally prohibitive.

4.4 Real Application
In order to test the predictive performance of the proposed model, we considered
two datasets involving a moderately high number of features. The first real data
experiment comprises 40 genes (response) involved in the isoprenoid pathway of
Arabidopsis thaliana. This set of genes were found to be highly correlated with 795
64

Table 4.2: Higher dimensional predictors: Mean and standard deviations of squared
errors under our bayesian factor tree (BFT), a mixture of factor analyzers (MFA)
and covariate dependent mixture of factor analyzers (dMFA). Bold indicates best
MSE.

p

q

n

100

1,000

50

100

5,000

50

100

10,000

50

100

500

1,000

50

100

5,000

50

100

10,000

50

100

Normal model
bft
mfa
dmfa

bft

Swissroll
mfa
dmfa

0.10

0.31

0.29

0.09

0.28

0.13

(0.09)

(0.29)

(0.27)

(0.06)

(0.32)

( 0.19)

0.18

0.49

0.29

0.15

0.41

0.20

(0.20)

(0.45)

(0.30)

(0.28)

(0.73)

(0.35)

0.14

0.26

0.20

0.21

0.37

0.29

(0.10)

(0.24)

( 0.84)

(0.25)

(0.63)

(0.45)

0.18

0.40

0.33

0.14

0.44

0.20

(0.29)

(0.57)

(0.21)

(0.09)

(0.66)

(0.61)

0.08

0.56

0.44

0.25

0.47

0.36

(0.03)

(0.98)

(0.56)

(0.23)

(0.20)

(0.24)

0.30

0.44

0.35

0.26

0.59

0.42

(0.22)

(0.32)

(0.32)

(0.14)

(0.45)

(0.30)

0.45

0.57

0.47

0.43

0.93

0.76

(0.17)

(0.31)

(0.68)

(0.22)

(0.64)

(0.96)

0.40

0.83

0.79

0.44

0.67

0.50

(0.28)

(0.61)

(0.47)

(0.23)

(0.48)

(0.90)

0.62

0.59

0.58

0.92

0.96

0.94

( 0.63)

(0.37)

(0.33)

(0.34)

(0.31)

(0.34)

0.35

0.59

0.59

0.85

0.88

0.73

(0.15)

(0.23)

(0.66)

(0.28)

(0.28)

(0.33)

0.33

0.58

0.42

0.29

0.83

0.70

(0.32)

(0.34)

(0.35)

(0.16)

(1.08)

(0.68)

0.33

0.36

0.35

0.40

0.34

0.32

(0.27)

(0.25)

(0.26)

(0.30)

(0.23)

(0.21)

65

Figure 4.2: Plots depicts the relative CPU time of BFT (our approach), versus
dMFA as a function of ambient dimension of x, under the normal and the swissroll
simulation scenario with q  500 and n  100. The x-axis is the number of predictors
involved in the experiment, where k equals 1 thousand, so that 2k=2,000. BFT
outperforms dMFA regardless of ambient dimension (rcpu 1 for all p).

genes (predictors) from 56 other metabolic pathways in Arabidopsis thaliana (Wille
et al., 2004). All variables have been log-transformed and standardized to zero mean
and unit variance.
The second dataset is a large population dataset involving 518 subjects from the
capital region of Finland. For each subject a set of 138 metabolites and about 35, 000
genes are measured. Inouye et al. (2010) identified a set of highly correlated genes,
the lipidleukocyte (LL) module, as having a prominent role in over 80 metabolites.
Therefore, gene levels should be informative about the two third of metabolites. All
variables were standardized to zero mean and unit variance.
The predictive accuracy of each method was estimated by leave-one-out cross66

validation. Table 4.3 shows percentiles of squared errors for the two data examples
above. For the first data example, we compare our model to MFA and dMFA. For
the second data example, given the ultra-high dimensionality of the predictors space,
we only compared our approach to MFA. As shown, our approach leads to the best
predictive performance.
Table 4.3: Real dataset: Percentiles (2.5%, 50% and 97.5%) of squared errors under
our Bayesian Factor Tree (BFT), a mixture of factor analyzers (MFA) and covariate
dependent mixture of factor analyzers (dMFA). For the second data example, given
the ultra-high dimensionality of the predictor space, we compared our approach only
to MFA.

n

p

q

(1)

118

40

(2)

518

138

795

mfa
(2.5%, 50%, 97.5%)
(0.50, 0.97, 1.15)

bft
(2.5%, 50%, 97.5%)
(0.40, 0.74, 0.90)

35k

(0.60, 0.87, 1.20)

(0.50, 0.71, 0.95)

67

dmfa
(2.5%, 50%, 97.5%)
(0.45, 0.89, 0.95)

5
Concluding Remarks and Future Direction

To summarize, we have dealt with two problems in this thesis. For the first problem
we have proposed a new repulsive mixture modeling framework, which should lead
to substantially improved unsupervised learning (clustering) and density estimation
performance in general applications. A key aspect is soft penalization of components
located close together to favor, without sharply enforcing, well separated clusters that
should be more likely to correspond to the true missing labels. We have focused on
Bayesian MCMC-based methods, but there are numerous interesting directions for
ongoing research, including fast optimization-based approaches for learning mixture
models with repulsive penalties.
The other problem, we have dealt with, is to learn a the density of a response
variable given high dimensional features. In chapter 3, we have introduced a general
formalism to estimate conditional distributions via multiscale dictionary learning.
We developed a novel multiresolution stick breaking process that can scale substantially better than other existing algorithms to massive number of features, while
resulting in good predictive performance. An important property of any such strategy is the ability to scale up to ultrahigh-dimensional predictors. We considered
68

simulations and real-data examples where the dimensionality of the predictor space
exceeded several thousands. To our knowledge, no other approach to learn conditional distributions can run at this scale. Our approach explicitly assumes that the
posterior f py |xq can be well approximated by projecting x onto a lower-dimensional
space. Note that this assumption is much less restrictive than assuming that x
is close to a low-dimensional space; rather, we only assume that the part of f pxq
that “matters” to predict y lives near a low-dimensional subspace. Because a fully
Bayesian strategy remains computationally intractable at this scale, we developed
an empirical Bayes approach, estimating the partition tree based on the data, but
integrating over scales and posteriors.
We demonstrate that even though we obtain posteriors over the conditional distribution f py |xq, our approach, dubbed multiscale stick-breaking (MSB), outperforms
standard machine learning algorithms in terms of both predictive accuracy and computational time, as the sample size and ambient dimension increase. In future work,
we will extend these numerical results to obtain theory on posterior convergence.
Indeed, while multiscale methods benefit from a rich theoretical foundation (Allard
et al., 2012), the relative advantages and disadvantages of a fully Bayesian approach,
in which one can estimate posteriors over all functionals of f py |xq at all scales, remains relatively unexplored.
In chapter 4, we have extended the multiresolution stick breaking model proposed in chapter 3 to handle multivariate responses. For this purpose, dictionary
densities were defined as multivariate normal with a factor analytic form chosen for
the covariance to reduce dimensionality. The proposed model results in a mixture of
factor analyzers defined over different levels of resolution. As illustrated, inference on
component-specific parameters is carried out using Gibbs sampler. Our model leads
to good predictive performance and can scale to high number of features. However,
the proposed model may face computational problems as the number of response
69

variables increases. In fact, at each Gibbs sampler step and for each observation,
the likelihood function (a mixture of multivariate Gaussians) needs to be computed.
This step can become computational prohibitive as the number of response variables
increase, reducing dramatically the efficiency of our model. There are a variety of
real worlds applications involving a large number of response variables depending on
huge number of features. For this applications, a more efficient algorithm relying
on some likelihood approximation needs to be considered. In future works, we will
extend our algorithm to efficiently handle situations in which not only the predictors
but also the response is high dimensional.
Another possible direction for future work is using parallelized and distributed
systems to estimate the proposed multiresolution stick breaking model. Though this
model can scale substantially better than competitors to high dimensional features,
we may gain more efficiency by using parallelized and distributed systems. For this
purpose, we should adopt other estimation techniques rather than Bayesian method
relying on Markov chain Monte Carlo. In fact, given the serial structure of MCMC
algorithms, they cannot fully be learned using parallelized systems. Alternatively,
we may use an hybrid model where dictionary densities are estimated in parallel
using frequentist methodologies, such as maximum likelihood estimation, and then
stick breaking weights are estimated through Markov chain Monte Carlo.

70

Appendix A
Chapter 2: Theory

A.1 Cited Theorems and Assumptions
Assumptions of theorem 3.1 in Scricciolo (2011)
(i) The prior on σ has a continuous and positive Lebesgue density ψ on an interval
containing σ0 and its distribution function Ψ, for constants e1 , e2 , e3

¡ 0, satisfies

Ψpsq ¤ exppe1 se2 q as s Ñ 0 and 1  Ψpsq ¤ se3 as s Ñ 8
(ii) The prior for the number of components is such that, for constants d1 , d2
0

ϑpk q ¤ d1 exppd2 k q for all k

¡ 0,

PN

(iii) For each k, the prior for the weights is a Dirichlet with parameters pα1 , . . . , αk q
such that, for constants a1 , a2

¡ 0, a3 ¥ 1 and for 0
a2 a1

 ¤ 1{pa3 k q and j

 1, . . . , k

¤ α j ¤ a3

Assumptions B1-B5
Assumptions B1-B5 corresponds to assumptions A1-A5 in Rousseau and Mengersen

71

(2011). Assumptions differ only in the conditions concerning the prior on the componentspecific parameters in assumption A5. In condition B5, we assume that π is defined
as (2) and h is defined as either (3) or (4). For the sake of clarity, let us state
assumption B1:
B1) There exists a q

¥ 0 such that for δn  plog nqq n1{2 the following holds

lim lim sup En0 tΠ p}f

M

Ñ8

Ñ8

n

 f0}1 ¥ M δn|Ynqu  0

Ghosal et al. (2000)’s Theorem
Theorem 8. Let πn be a sequence of priors on a class of densities F equipped
with a metric d that can be either the Hellinger or the one induced by the L1 -norm.

Ñ 0 such that n minp¯n, ˜nq Ñ 8, constants

Assume that for positive sequences ¯n , ˜n
d1 , d2 , d3 , d4

¡ 0 and sets Fn  F, we have

log Dp¯n , Fn , dq ¤ d1 n¯2n
πn pF zFn q ¤ d3 exp
(

πn BK L pf0 ; ˜2n q

pd2

4qn˜2n

(A.1)
(

¥ d4 exppd2n˜2nq

³

³

where BK L pf0 ; ˜2n q  f : f0 logpf0 {f q ¤ ˜2n ; f0 logpf0 {f q2
Then, for n

(A.2)
(A.3)

¤ ˜2n

(

.

 maxp¯n, ˜nq and a sufficiently large constant M ¡ 0, the posterior

probability
πn tf : dpf, f0 q ¡ M n |Yn u Ñ 0
in P0n probability, as n Ñ 8.

A.2 Proofs
Throughout the appendix we write all constants whose values are of no consequence
to be equal to 1.
72

Proof of lemma 1. By assumption B0, ϑpk

 k0q ¡ 0.

We consider the case f is

a finite mixture with k0 components. By assumption A1, for each η
is a corresponding δ
with |γ1

¡

0 such that, for any given y

P

¡

0 there

Y and for all γ1 , γ2

P

Γ

 γ2| δ, we have that |φpy; γ1q  φpy; γ2q| η. Let Sδ  Pδ  Γδ with
Γδ  tγ : |γj  γ0j | ¤ δ, j ¤ k0 u and Pδ  tp : |pj  p0j | ¤ δ, j ¤ k0 u. By assumption
A1 and A2, for any given y and for any η ¡ 0, there is a δ ¡ 0 such that |f0  f | ¤ η
if θ P Sδ . This means that, f Ñ f0 as θ Ñ θ0 , for any given y. Equivalently, we can
say that | logpf0 {f q| Ñ 0 pointwise as θ Ñ θ0 . Notice that
|log pf0{f q| ¤


"
*

log sup φ γ


P

γ D0

pq 

"

*

log inf φ γ 
γ PD0

pq

By assumption A3 and applying the dominated convergence theorem, for any  ¡ 0
there is a δ

¡ 0 such that

³

f0 logpf0 {f q

 if θ

P Sδ .

By the independence of the

weights and the parameters of the kernel,
ΠpKLpf0 , f q

q ¥ λpPδ qπ pΓδ q

Assumption A4 combined with the fact that tγ : ||γ

 γ0||1 ¤ δu  Γδ result in
π pΓδ q ¡ 0. Finally, since λ  Dirichletpαq, it can be shown that λpPδ q ¡ 0.
Proof of lemma 2. Recall that, under assumptions in lemma 1, γ is a vector of only
location parameters. For any given x

P Γk , define Dx  tγ : ||γ  x||1

υ {2u. By

the assumptions on h, for any given x satisfying condition A4 in lemma 2, hpγ q ¡ 0
for γ such that dpγs , xs q

D

υ {2 for s  1, . . . , k. Since,

 tγ : dpγs, xsq

υ {2; s  1, . . . , k u,

it follows that hpγ q ¡ 0 on D. By assumption, g0 is positive on Γ, therefore it follows
that π pγ q ¡ 0 on D.

73

Proof of lemma 3. To prove lemma 3 we need to show that the three conditions of
theorem 2.1 in Ghosal et al. (2000) are satisfied. First, define Dp, F, ds q as the
maximum number of points in F such that the distance, with respect to metric ds ,
between each pair is at least . Let ds be either the Hellinger metric or the one
induced by the L1-norm. For given sequences kn , an , un
Fnpkq



#

f :f



k
¸



pj φpγj , σ q, γ

Ò 8 and bn Ó 0 define
+

P pan, anqk , σ P pbn, unq

j 1

 Ykj1Fnpjq. As it is shown in Scricciolo (2011), for constants f2 ¥ f1 ¡ 0 and
l1 , l2 , l3 ¡ 0, derived below to satisfy condition (2) and (3) in Ghosal et al. (2000),
1 1{e
1 1{2
, bn  l1 plog ¯
and defining f1 log n ¤ kn ¤ f2 log n, an  l3 plog ¯
and
n q
n q
l
un  ¯
¯n , Fn , ds q À n¯2n with ¯n  n1{2 log n.
n , log D p
Let An,j  pan , an qj . In order to show condition (2) of theorem 2.1. in Ghosal
et al. (2000), we need to show that there is a constant q1 ¡ 0 such that π pAC
n,k q À
exppq1 a2n q. From the exchangeability assumption it follows
and Fn

n

2

2

prpAC
n,k |k

 sq  °sj1 j!pss!jq! π

AC
n,j

¤ s °sj1 pjp1sq!p1sq! jq! π

 An,sj
AC
n,j




 An,sj ¤ sπmpACn,1q

Therefore, condition C1 implies that, for a positive constant q1 we have π pAC
n,k q À

E pk q exppq1 a2n q with E pk q

8 by condition (ii).

Given a positive constant z2

chosen to satisfy condition (3) in theorem 2.1 of Ghosal et al. (2000), let f1

pz2 4q{d2, l1 ¤ te1{4pz2

4qu1{e2 , l2

¥ 4pz2 4q{e3 and l3 ¥ t4pz2

¥

4q{q1 u1{2 . Under

these values of f1 , l1 , l2 and l3 , following Scricciolo (2011), assumptions (i), (ii) and
assumption C1 imply ΠpF zFn q À exp tpz2

4qn˜2n u with ˜n

 n1{2plog nq1{2.

To show condition (3) of theorem 2.1 in Ghosal et al. (2000), we can again follow
the proof of theorem 3.1. in Scricciolo (2011). The only thing we need to show is
74

that, there are constants u1 , u2 , u3
π p||γ  γ0 ||1

¡ 0 such that for any n ¤ u3

¤ nq ¥ u1 exp tu2k0 logp1{nqu

that is guaranteed by condition C2. Therefore, it can be easily showed that, for
sufficiently large n, z2

¡ 0 and ˜n  n1{2plog nq1{2, Π tBKLpf0, ˜2nqu Á exppz2n˜2nq.

Proof of lemma 4. First, let us check that condition C1 is satisfied. Clearly, under
the assumptions on h, π leads to exchangeable atoms. Under the assumptions on π,
the following holds
πm p|γ1 | ¥ tq 

»

|γ1 |¥t

πm pγ1 qdγ1

¤ c1c2

»

|γ1 |¥t

g0 pγ1 qdγ1

with c1 and c2 defined as in (2). It follows that there exists a constant n1
that πm p|γ1 | ¥ tq À exppn1 t2 q.

¡ 0 such

Now let us verify condition C2. Assumptions on h imply that for any 0
there is a corresponding 0
for all γ satisfying mintps,j q:s

0

 min r1{2, g pδ1qs

 1p1  1{k0q. By assumption 
δ1 . Let us define M pγ, xq and N pγ, xq as follows,

with 1 defined as in assumption B0 and δ1

"

M pγ, xq  γ :

*

min

tps,j q:s j u

1

 g1pq and constants w1 ¡ 0 such that hpγ q ¥ w1k
j u dpγj , γs q ¥ δ. Let u3 be defined as

δ

u3

and therefore δ



dpγj , γs q ¥ x ,

N pγ, xq  tγ : |γj

Then,

75

u3

 γ0j | ¤ x; j  1, . . . , k0u

π p||γ  γ0 ||1

¤ q ¥

³

Á

³

Á

³

t||γ γ0 ||1 ¤uXM pγ,δq π pγ qdγ
k0

t||γ γ0 ||1 ¤uXM pγ,δq 
k0

p { qXM pγ,δ1 q 

N γ, k0

±k0

 g0 pγj qdγ

j 1

±k0

 g0 pγj qdγ

j 1

Now let us show that N pγ, {k0 q

 M pγ, δ1q. Consider pairs ps, j q with s  j.
Without loss of generality assume γ0s ¡ γ0j . Now, consider the possible values of
pγj , γsq contained in the set N pγ, {k0q. The smallest distance between values of γs
and γj contained in N pγ, {k0 q is
pγ0s  {k0q  pγ0j

{k0 q ¥ 1  2{k0

¥ 1p1  1{k0q  δ1

Since the previous holds for any pair ps, j q with s

M pγ, δ1 q. Therefore,
π p||γ  γ0 ||1

¤ q Á

³

k0

p { q

N γ, k0

Á k

0

for a constant g1

±k0

 g0 pγj qdγ

j 1

exp tg1 k0 logp1{qu

Á exp tpg1

¡ 0.

 j, we have N pγ, {k0q 

1qk0 logp1{qu

Proof of theorem 6. Only for this proof and for ease of notation the density f will

 tθ : fθ  f0u. In
order to define each vector in T , let 0  t0 t1 t2 . . . tk ¤ k and γj  γ0i for
°
j P Ii  tti1 1, ti u. Let p0i  tj t  1 pj and pj  0 for j ¡ tk . Define qj  pj {p0i

be referred as fθ . Define the non identifiability set as T

0

i

for j

P Ii. Define An 

M δn u. Let Dn



³

!

0

i 1

minσPSk

t}f f0 }1

δn

°
kk0



i 1

pσ p iq

¡ δnMn

)

and A1n

 An Xt}f  f0}1 ¤

u exppln pθq ln pθ0 qqdpπ  λqpθq with ln pθ0 q being the log-

likelihood evaluated at θ0 . Along the line of Rousseau and Mengersen (2011)’s proof,
to prove theorem 1 we need to show that for any 
76

¡ 0 there are positive constants

m1 , m2 and a permutation σ

P Sk such that
Dn

¥ m1nspk ,αq{2

(A.4)

0

ΠpA1n q ¤ m2 δnspk0 ,αq Mnᾱm{2r2
with spk0 , αq



k0

1

(A.5)

°kk0

 ασpj q . Following Rousseau and Mengersen

mk0

j 1

(2011)’s proof, we can show that, under condition B5, (A.4) is satisfied for sufficiently
large n. Concerning (A.5), Rousseau and Mengersen (2011) showed that on A1n , there
is a set Ii containing indices j1 and j2 such that

|γj  γ0i| ¤ pδn{qj q1{2 , |γj  γ0i| ¤ pδn{qj q1{2
1

with qj1

1

2

2

¡ {k0 and qj ¡ δnMn{2. The triangle inequality implies
2

|γj  γj | ¤ 2 tδn{ minpqj , qj qu1{2
1

2

1

2

1{2 .

Now, for sufficiently large n, minpqj1 , qj2 q ¡ δn Mn {2 and therefore |γj1  γj2 | À Mn

Since g is bounded above by a positive constant, it exists a constant c ¡ 0 such that
hpγ q ¤ cg tdpγj1 , γj2 qu ¤ cg Mn1{2

P A1.
λqpγ  pq.

for γ



(A.6)

Let the prior probability of the set A1n be defined as ΠpA1n q



³

A1n

dpπ 

To find an upper bound for this integral, directly apply the proof of

Rousseau and Mengersen (2011) showing that ΠpA1n q


1{2

By assumption, for sufficiently large n, g Mn
m{2  ᾱ, it follows

77

n



1{2 δ spk0 ,αq M ᾱm{2 .
n
n

Mn

¤ r1Mnr .

sr2 spk0 ,αq
δ

ΠpA1n q ¤ Mn

¤g

2

Letting sr2

 r2

Appendix B
Chapter 2: Additional Results

B.1 Synthetic examples
Densities in figure 2.2 were defined as follows. Density pIaq is a standard normal den-

sity, density pIbq is a two components mixture of Gaussians with weights p0.7, 0.3q,

location parameters p0, 0q and scale parameters p0.2, 2q. Density pIcq is a Students

t density with eight degrees of freedom. Density pIIaq is a two-components mixture
of Gaussians with mixture weights p0.3, 0.7q, location parameters

p0.8, 0.8q

and

variances p0.2, 0.2q. Density pIIbq is a mixture having the same weights and scale
parameters as density pIIaq but location parameters

p1.5, 1.5q, resulting in better

separated clusters. Density pIIIaq is a mixture of a Gaussian with mean 0.7, vari-

0.7, variance 0.2, weight
0.3, skewness parameter 0.5 and kurtosis parameter 3. Density pIIIbq is a mixture

ance 0.2 and weight 0.7 and a Pearson density with mean

having the same weights, scale parameters, skewness and kurtosis parameters as density pIIIaq but having location parameter

p1.2, 1.2q, resulting in better separated

clusters. Density pIV q is a bivariate mixture of two Gaussians with weight 0.5, lo-

cation parameters p0, 0q and p2, 1q, variances p0.2, 0.2q and p0.1, 0.1q and correlation
78

coefficients 0.7 and 0.
Hyperparameters paσ , bσ q for the density of the scale parameter were set to p3, 1q.
Parameters αj s were all set equal to the same value α̃ and in accordance with
Rousseau and Mengersen (2011)’s specification for the density of the weights. For
the non-repulsive model, the kernel locations were given independent standard normal priors. For the repulsive model, we considered a repulsion function defined as
(4), with g defined as (5) and we chose g0 to be the standard normal. The distance
involved in the repulsion function was chosen to be the symmetric K-L divergence
for repulsive priors satisfying definition 1(i) and the Euclidean distance for repulsive
priors satisfying definition 1(ii). We chose parameters τ as described in §2.2.2. In
particular, the separation level c used to calibrate τ was fixed at six.
Section 2.3 presents results such as misclassification errors and K-L divergences.
These quantities were derived as follows. The misclassification error was calculated
based on the posterior similarity matrix. Letting n be the number of observations,
the similarity matrix is defined as a n-dimensional square matrix with pi, j q element
equal to one if the ith and the jth observation belong to the same group and zero
otherwise. Let S be the true similarity matrix and Ŝh be the similarity matrix
obtained at the hth Markov chain Monte Carlo iteration. Let S pi, j q be the pi, j q
element of the matrix S and define the misclassification error mh as

mh



n
n
1 ¸ ¸ 
1 Ŝh pi, j q  S pi, j q
np i1 j i 1

with np being the number of distinct pairs in which n observations may be combined
and 1pq the indicator function. The approximation of the K-L divergence at the hth
iteration was calculated through

klh



s
¸



log tf0 py0j q{f py0j ; θh qu

j 1

79

with f0 being the true density, f the fitted density, θh the posterior sample at the
hth iteration of parameters involved in f and y0

 ty01, . . . , y0su being s draws from

the true density f0 . In all the experiments s was chosen to be 10, 000.

B.2 Additional results
As mentioned in §2.3, knowing that the smoothing parameter α̃ directly affects the
behavior of the mixture weights, it might be argued that under an accurate choice
of α̃, the non-repulsive prior may perform as well as the repulsive prior in emptying
the extra components. Hence, we ran the non-repulsive model for different values of
α̃. This comparison was done by utilizing 1, 000 draws from density IIb. The upper
bound on the number of components was chosen to be six and the repulsive prior
was chosen to satisfy definition 1(ii). The slice sampler was run for 10, 000 iterations
with a burn-in of 5, 000. The chain was thinned by keeping every 10th draw. Table
B.1 provides posterior summary statistics for parameters involved in the repulsive
model and non-repulsive model for different choices of α̃. Clearly, as α̃ decreases,
the non-repulsive model empties the extra components. However, we also see that
the 95% credible interval of the location parameters now does not include the true
value. This might be explained by the fact that as lower values of α̃ are considered,
the posterior can concentrate on too few components leading to degenerate results
in terms of estimates of specific component parameters.
Table B.2 shows extra components weights and K-L divergence for datasets drawn
from density pIIa, IIbq under repulsive and non-repulsive atoms with six and ten
components. As the number of components increases, the probability weight on the
extra components remains close to zero under repulsive mixture priors, while the
probability weight can grow substantially under non-repulsive priors. Hence, the
degraded performance in clustering reported for non-repulsive mixtures relative to
repulsive mixtures for the k

 6 case becomes more pronounced in the k  10 case.
80

Table B.1: Percentiles 2.5th and 97.5th of sum of extra weights (sew q and location
parameters involved in the two components with highest weights (µ1 , µ2 ) under repulsive and non-repulsive atoms for different values of α̃ considering 1, 000 draws
from density IIb

true
µ1
µ2
sew

1.50
1.50
0.00

N-R

1{3
2.5%
97.5%

α̃

1.51
1.51
0.00

1{10
2.5%
97.5%

1.54
1.44
0.14

1.52
1.50
0.00

1.53
1.47
0.02

R

1{100
2.5%
97.5%

1.52
1.49
0.00

1{3
2.5%
97.5%

1.52
1.47
0.01

1.49
1.54
0.00

1.52
1.43
0.01

Concerning the estimation performance, the K-L divergences resulting from repulsive
and non-repulsive mixtures are very similar for high sample sizes.

Table B.2: Mean and standard deviations of the total probability weight placed on
extra components (more than used in generating data) and K-L divergence under
non-repulsive and repulsive mixtures in different synthetic data cases.
k=6
Data
Model
Extra weights
n  100
n  1000
K-L
n  100
n  1000

IIa

k=10
IIb

IIa

IIb

N-R

R

N-R

R

N-R

R

N-R

R

0.21

0.08

0.09

0.02

0.34

0.23

0.15

0.06

0.21

0.09

0.03

0.00

0.32

0.15

0.05

0.01

0.03

0.05

0.07

0.08

0.03

0.06

0.08

0.10

0.01

0.01

0.01

0.01

0.01

0.01

0.01

0.01

p0.11q p0.07q p0.07q p0.02q p0.11q p0.09q p0.09q p0.04q
p0.11q p0.06q p0.04q p0.01q p0.11q p0.08q p0.04q p0.01q
p0.01q p0.02q p0.02q p0.03q p0.02q p0.03q p0.02q p0.04q
p0.00q p0.00q p0.03q p0.03q p0.00q p0.00q p0.00q p0.00q

The value of τ in the repulsive prior 2.4 relies upon the choice of the separation
level c. In order to assess the sensitivity of results to this choice, the K-L divergence
was computed for different separation levels. For this comparison, observations were
drawn from densities pIIaq and pIIbq. Mixtures of six and ten components were
81

fitted using a Gibbs sampler. The slice sampler was run for 10, 000 iterations with
a burn-in of 5, 000. The chain was thinned by keeping every 10th draw. Figure B.1
shows the median of the K-L divergence between the true and the estimated density.
Clearly, as the separation level increases, the K-L divergence remains stable.

KL Divergence

(I)
0.09

0.1

0.08

0.09

0.07

0.08

(II)

0.07

0.06

0.06
0.05
0.05
0.04

0.04

0.03

0.03

0.02

0.02

0.01

0.01

0
1

2

3

4
c

5

6

0
1

7

2

3

4
c

5

6

7

Figure B.1: Plot of K-L divergence under six and ten components p6 : I, 10 : II q
for different choice of separation level c under density pIIaq for different sample sizes
(100:solid ; 1000:dash) and density pIIbq for different sample sizes (100:dash-dot;
1000:dot)

82

Bibliography
Aguilar, O. and West, M. (2000), “Bayesian dynamic factor models and portfolio
allocation,” Journal of Business and Economic Statistics, 18, 338–357.
Allard, W., Chen, G., and Maggioni, M. (2012), “Multiscale geometric methods for
data sets II: geometric wavelets,” Applied and Computational Harmonic Analysis,
32, 435–462.
Arden, R., Chavez, R. S., Grazioplene, R., and Jung, R. E. (2010), “Neuroimaging
creativity: a psychometric view.” Behavioural brain research, 214, 143–156.
Bernardo, J. M., Bayarri, M. J., Berger, J. O., Dawid, A. P., Heckerman, D., Smith,
A. F. M., and West, M. (2003), “Bayesian factor regression models in the large p
small n paradigm,” Bayesian Statistics, 7, 733–742.
Bhattacharya, A. and Dunson, D. B. (2011), “Sparse Bayesian infinite factor models,” Biometrika, 98, 291–306.
Bishop, C. M. and Svensen, M. (2003), “Bayesian hierarchical mixtures of experts,”
Nineteenth Conference on Uncertainty in Artificial Intelligence , pp. 57–64.
Breiman, L. (1996), “Bagging predictors,” Machine Learning, 24, 123140.
Breiman, L. (2001), “Random forests,” Machine Learning, 45, 5–32.
Breiman, L., Friedman, J., Stone, C. J., and Olshen, R. A. (1984), Classification and
regression trees, Chapman & Hall/CRC.
Chauveau, D. and Diebolt, J. (1998), “An automated stopping rule for MCMC convergence assessment,” Computational Statistics, 14, 419–442.
Chen, M., Silva, J., and Paisley, J. (2010), “Compressive Sensing on Manifolds Using a Nonparametric Mixture of Factor Analyzers: Algorithm and Performance
Bounds,” IEEE TRANSACTIONS ON SIGNAL PROCESSING , 58, 6140–6155.
Chipman, H. A., George, E. I., and McCulloch, R. E. (1993), “Bayesian CART model
search,” Journal of the American Statistical Association, 443, 935–948.

83

Chiu, T., Leonard, T., and Tsui, K. (1996), “The matrix-logarithmic covariance
model,” Journal of the American Statistical Association, 91, 198–210.
Chung, Y. and Dunson, D. B. (2009), “Nonparametric Bayes conditional distribution
modeling with variable selection,” Journal of the American Statistical Association,
104, 1646–1660.
Coifman, R. and Lafon, S. (2006), “Diffusion Maps,” Applied and Computational
Harmonic Analysis, 21, 5–30.
Cron, A. J. and West, M. (2011), “Efficient Classification-Based Relabeling in Mixture Models,” The American Statistician, 65, 16–20.
Daley, D. J. and Vere-Jones, D. (2008), An Introduction to the Theory of Point
Processes, Springer.
Dasgupta, S. (1999), “Learning Mixtures of Gaussians,” Proceedings of the 40th
Annual Symposium on Foundations of Computer Science, pp. 633–644.
Dasgupta, S. and Schulman, L. (2007), “A Probabilistic Analysis of EM for Mixtures
of Separated, Spherical Gaussians,” The Journal of Machine Learning Research,
8, 203–226.
Davis, D. T. and Hwang, J. N. (1998), “Expanding Gaussian Kernels for Multivariate
Conditional Density Estimation,” IEEE Transactions on Signal Processing, 46,
269–275.
Death, G. (2002), “Multivariate Regression Trees: A New Technique for Modeling
Species-Environment Relationships,” Ecology, 83, 1105–1117.
Dempster, A., Laird, N., and Rubin, D. (1977), “Maximum likelihood from incomplete data via the EM algorithm,” Journal of the Royal Statistical Society, Series
B, 39, 1–38.
Dunson, D. B., Pillai, N., and Park, J. H. (2007), “Bayesian density regression,”
Journal of the Royal Statistical Society Series B-Statistical Methodology, 69, 163–
183.
Escobar, M. D. and West, M. (1995), “Bayesian Density Estimation and Inference
Using Mixtures,” Journal of the American Statistical Association, 90, 577–588.
Fan, J. Q. and Yim, T. H. (2004), “A crossvalidation method for estimating conditional densities,” Biometrika, 91, 819–834.
Fan, J. Q., Yao, Q. W., and Tong, H. (1996), “Estimation of conditional densities and
sensitivity measures in nonlinear dynamical systems,” Biometrika, 83, 189–206.

84

Figueiredo, M. A. T. and Jain, A. K. (2002), “Unsupervised Learning of Finite
Mixture Models,” IEEE transactions on pattern analysis and machine intelligence,
24, 381–396.
Fraley, C. and Raftery, A. E. (2002), “Model-Based Clustering, Discriminant Analysis, and Density Estimation,” Journal of the American Statistical Association, 97,
611–631.
Fu, G., Shih, F. Y., and Wang, H. (2011), “A kernel-based parametric method for
conditional density estimation,” Pattern recognition, 44, 284–294.
Fyshe, A., Fox, E., and Dunson, D. (2012), “Hierarchical Latent Dictionaries for
Models of Brain Activation,” Proceedings of the International Conference on Artificial Intelligence and Statistics.
Gelfand, A., Schmidt, A., Banerjee, S., and Sirmans, C. (2004), “Nonstationary
multivariate process modeling through spatially varying coregionalization,” Test,
13, 263–312.
Geweke, J. F. and Zhou, G. (1996), “Measuring the pricing error of the arbitrage
pricing theory,” Review of Financial Studies, 9, 557–587.
Ghahramani, Z. and Beal, M. J. (2000), “Variational inference for Bayesian mixtures
of factor analyzers,” Neural Information Processing Systems 12, 52, 449–455.
Ghahramani, Z. and Hinton, G. E. (1997), “The EM algorithm for factor analyzers,”
Technical Report Number CRG-TR-96-1, The University of Toronto, Toronto.
Ghosal, S., Ghosh, J. K., and Van Der Vaart, A. W. (2000), “Convergence Rates of
Posterior Distributions,” The Annals of Statistics, 28, 500–531.
Gray, W. R., Bogovic, J. A., Vogelstein, J. T., Landman, B. A., Prince, J. L., and
Vogelstein, R. J. (2010), “Magnetic resonance connectome automated pipeline: an
overview.” IEEE pulse, 3, 42–8.
Griffin, J. E. and Steel, M. F. J. (2006), “Order-based dependent Dirichlet processes,”
Journal of the American Statistical Association, 101, 179–194.
Hannah, L. A., Blei, D. M., and Powell, W. B. (2011), “Dirichlet Process Mixtures
of Generalized Linear Models,” Journal of Machine Learning Research, 1, 1–33.
Hastie, D. and Green, P. J. (2012), “Model choice using reversible jump Markov
chain Monte Carlo,” Statistica Neerlandica, 66, 309–338.
Hatjispyros, S. J., Nicoleris, T., and Walker, S. G. (2011), “Dependent mixtures of
Dirichlet processes,” Computational Statistics & Data Analysis, 55, 2011–2025.

85

Hoff, P. D. and Niu, X. (2012), “A Covariance Regression Model,” Statistica Sinica,
22, 729–753.
Holmes, M. P., Gray, G. A., and Isbell, C. L. (2010), “Fast kernel conditional density
estimation: a dual-tree Monte Carlo approach,” Computational statistics & data
analysis, 54, 1707–1718.
Hothorn, T., Hornik, K., and Zeileis, A. (2006), “Unbiased Recursive Partitioning:
A Conditional Inference Framework,” Journal of Computational and Graphical
Statistics, 15, 651–674.
Huber, M. L. and Wolpert, R. L. (2009), “Likelihood-Based Inference for Matern
Type-III Repulsive Point Processes,” Advances in Applied Probability, 41, 958–
977.
Inouye, M., Kettunen, J., Soininen, P., Silander, K., Ripatti, S., Kumpula, L. S.,
Hamalainen, E., Jousilahti, P., Kangas, A. J., Mannisto, S., Savolainen, M. J.,
Jula, A., Leiviska, J., Palotie, A., Salomaa, V., Perola, M., Ala-Korpela, M., and
Peltonen, L. (2010), “Metabonomic, transcriptomic, and genomic variation of a
population cohort,” Molecular Systems Biology, 6, 1744–4292.
Ishwaran, H. and James, L. F. (2001), “Gibbs Sampling Methods for Stick-Breaking
Priors,” Journal of the American Statistical Association, 96, 161–173.
Ishwaran, H. and Zarepour, M. (2002), “Dirichlet Prior Sieves in Finite Normal
Mixtures,” Statistica Sinica, 12, 941–963.
Ishwaran, H., James, L. F., and Sun, J. (2001), “Bayesian Model Selection in Finite
Mixtures by Marginal Density Decompositions,” Journal of American Statistical
Association, 96, 1316–1332.
Jacobs, R. A., Jordan, M. I., Nowlan, S. J., and Hinton, G. E. (1991), “Adaptive
mixture of local experts,” Neural Computation, 3, 79–87.
Jasra, A., Holmes, C. C., and Stephens, D. A. (2005), “MCMC and the Label Switching Problem in Bayesian Mixture Models,” Statistical Science, 20, 50–67.
Jiang, W. X. and Tanner, M. A. (1999), “Hierarchical mixtures-of-experts for exponential family regression models: approximation and maximum likelihood estimation,” Annals of Statistics, 27, 987–1011.
Jordan, M. I. and Jacobs, R. A. (1994), “Hierarchical mixtures of experts and the
EM algorithm,” Neural Computation, 6, 181–214.
Jung, R. E., Grazioplene, R., Caprihan, A., Chavez, R. S., and Haier, R. J. (2010),
“White matter integrity, creativity, and psychopathology: Disentangling constructs with diffusion tensor imaging,” PloS one, 5, e9818.
86

Kalli, M., Griffin, J. E., and Walker, S. G. (2011), “Slice Sampling Mixture Models,”
Statistics and Computing, 21, 93–105.
Karypis, G. and Kumar, V. (1999), “A fast and high quality multilevel scheme
for partitioning irregular graphs,” SIAM Journal on Scientific Computing 20, 1,
359392.
Krauthausen, P. and Hanebeck, U. D. (2010), “Regularized non-parametric multivariate density and conditional density estimation,” IEEE Conference on Multisensor Fusion and Integration, pp. 180–186.
Larsen, D. R. and Speckman, P. L. (2004), “Multivariate Regression Trees for Analysis of Abundance Data,” Biometrics, 60, 543–549.
Lavine, M. and West, M. (1992), “A Bayesian Method for Classification and Discrimination,” Canadian Journal of Statistics, 20, 451–461.
Lawson, A. and Clark, A. (2002), Spatial Cluster Modeling, Chapman & Hall CRC,
London, UK.
Locarek-Junge, H. and Weihs, C. (2009), Classification as a Tool for Research,
Springer.
Lopes, H. F. and West, M. (2004), “Bayesian model assessment in factor analysis,”
Statistica Sinica, 14, 41–67.
Lopes, H. F., Gamerman, D., and Salazar, E. (2011), “Generalized spatial dynamic
factor models,” Computational Statistics & Data Analysis, 55, 1319–1330.
Lutz, R. W. and Buhlmann, P. (2006), “Boosting for high multivariate responses in
high dimensional linear regression,” Statistica Sinica, 16, 471–494.
Mallick, B. K. (1998), “Bayesian CART model search,” Biometrika, 85, 363–377.
McLachlan, G. J. and Peel, D. (2000), Finite Mixture Models, vol. 299, Wiley Series
in Probability and Statistics.
Meeds, E. and Osindero, S. (2006), “Bayesian hierarchical mixtures of experts,”
Advances in Neural Information Processing Systems.
Minka, T. (2001), “Automatic choice of dimensionality for PCA,” Advances in neural
information processing systems, pp. 598–604.
Mori, S. and Zhang, J. (2006), “Principles of diffusion tensor imaging and its applications to basic neuroscience research.” Neuron, 51, 527–39.
Mossavat, I. and Amft, O. (2011), “Sparse bayesian hierarchical mixture of experts,”
IEEE Statistical Signal Processing Workshop (SSP).
87

Muller, P., Erkanly, A., and West, M. (1996), “Bayesian curve tting using multivariate normal mixtures,” Biometrika, 83, 67–79.
Muthen, B. and Shedden, K. (1999), “Finite Mixture Modeling with Mixture Outcomes Using the EM Algorithm,” Biometrics, 55, 463–469.
Neal, R. M. (2003), “Slice Sampling,” The Annals of Statistics, 31, 705–767.
Norets, A. and Pelenis, J. (2012), “Bayesian modeling of joint and conditional distributions,” Journal of Econometrics, 168, 332–346.
Nott, D. J., Tan, S. L., Villani, M., and Kohn, R. (2012), “Regression density estimation with variational methods and stochastic approximation,” Journal of Computational and Graphical Statistics, 21, 797–820.
Onatski, A. (2005), “Determining the number of factors from empirical distribution
of eigenvalues,” The Review of Economics and Statistics, 9, 557–587.
Pourahmadi, M. (1999), “Joint mean-covariance models with applications to longitudinal data: unconstrained parameterisation,” Biometrika, 86, 677–690.
Power, J. D., Barnes, K. A., Stone, C. J., and Olshen, R. A. (2012), “Spurious but
systematic correlations in functional connectivity MRI networks arise from subject
motion,” Neuroimage, 59, 2142–2154.
Raftery, A. E. and Fraley, C. (1998), “How Many Clusters? Which Clustering
Method? Answers via Model-Based Cluster Analysis,” The Computer Journal,
41, 578–588.
Rahman, I. U., Drori, I., Stodden, V. C., and Donoho, D. L. (2005), “Multiscale
representations for manifold- valued data,” SIAM J. Multiscale Model, 4, 1201–
1232.
Rasmussen, C. E. and Ghahramani, Z. (2002), “Infinite mixtures of Gaussian process
experts,” Advances in neural information processing systems 14.
Ren, L., Du, L., Carin, L., and Dunson, D. B. (2011), “Logistic stick-breaking process,” Journal of Machine Learning Research, 12, 203–239.
Richardson, S. and Green, P. (1997), “On Bayesian Analysis of Mixtures with an
Unknown Number of Components,” Journal of the Royal Statistical Society B, 59,
731–758.
Roberts, G. O. and Rosenthal, J. S. (2007), “Coupling and ergodicity of adaptive
Markov chain Monte Carlo algorithms,” Journal of Applied Probability, 44, 458–
475.

88

Rodriguez, A. and Dunson, D. B. (2011), “Nonparametric Bayesian models through
probit stick-breaking processes,” Bayesian Analysis, pp. 145–178.
Rousseau, J. and Mengersen, K. (2011), “Asymptotic Behaviour of the Posterior
Distribution in Over-Fitted Models,” Journal of the Royal Statistical Society B,
73, 689–710.
Scricciolo, C. (2011), “Posterior Rates of Convergence for Dirichlet Mixtures of Exponential Power Densities,” Electronic Journal of Statistics, 5, 270–308.
Seber, G. A. F. (2004), Multivariate observations, Wiley.
Sethuraman, J. (1994a), “A Constructive Denition of Dirichlet Priors,” Statistica
Sinica, 4, 639–650.
Sethuraman, J. (1994b), “A constructive denition of Dirichlet priors,” Statistica
Sinica, 4, 639–650.
Shahbaba, B. and Neal, R. (2009), “Non linear models using Dirichlet process mixtures,” Journal of Machine Learning Research, 10, 1829–1850.
Shapire, R., Freund, Y., Bartlett, P., and Lee, W. (1998), “Boosting the margin: a
new explanation for the effectiveness of voting methods,” Annals of Statistics, 26,
16511686.
Sikka, S., Vogelstein, J. T., and Milham, M. P. (2012), “Towards Automated Analysis
of Connectomes: The Configurable Pipeline for the Analysis of Connectomes (CPAC),” in Organization of Human Brain Mapping, Neuroinformatics.
Stephens, M. (2000a), “Bayesian Analysis of Mixture Models with an Unknown Number of Components - An Alternative to Reversible Jump Methods,” The Annals
of Statistics, 28, 40–74.
Stephens, M. (2000b), “Dealing with label switching in mixture models,” Journal of
the Roya; statistical society B, 62, 795–810.
Sugar, C. and James, G. (2003), “Finding the number of clusters in a data set: an
information theoretic approach,” Journal of the American Statistical Association,
98, 750–763.
Tipping, M. E. and Bishop, C. M. (1997), “Mixtures of Principal Component Analysers,” In Proceedings IEE Fifth International Conference on Articial Neural Networks, pp. 13–18.
Tipping, M. E. and Bishop, C. M. (2012), “Probabilistic principal component analysis,” Journal of the Royal Statistical Society, Series B, 61, 611–622.

89

Tokdar, S. T., Zhu, Y. M., and Ghosh, J. K. (2010), “Bayesian density regression
with logistic Gaussian process and subspace projection,” Bayesian Analysis, 5,
319–344.
Tran, M. N., Nott, D. J., and Kohn, R. (2012), “Simultaneous variable selection
and component selection for regression density estimation with mixtures of heteroscedastic experts,” Electronic Journal of Statistics, 6, 1170–1199.
Utsugi, A. and Kumagai, T. (2011), “Bayesian analysis of mixtures of factor analyzers,” Neural Computation, 13, 993–1002.
Wang, J. (2010), “Consistent selection of the number of clusters via crossvalidation,”
Biometrika, 97, 893–904.
Wille, A., Zimmermann, P., Vranová, E., Fürholz, A., Laule, O., Bleuler, S., Hennig,
L., Prelic, A., von Rohr, P., Thiele, L., et al. (2004), “Sparse graphical Gaussian
modeling of the isoprenoid gene network in Arabidopsis thaliana,” Genome Biol,
5, R92.
Williams, P. M. (1996), “Using Neural Networks to Model Conditional Multivariate
Densities,” Neural Computation, 8, 843–854.
Wu, Y., Tjelmeland, H., and West, M. (2007), “Bayesian CART: Prior Specification
and Posterior Simulation,” Journal of Computational and Graphical Statistics, 16,
44–66.
Yao, W. and Lindsay, B. G. (2009), “Bayesian mixture labeling by highest posterior
density,” Journal of the American Statistical Association, 104.
Zhou, X. and Liu, X. (2008), “The EM algorithm for the extended finite mixture
of the factor analyzers model,” Computational Statistics and Data Analysis, 52,
3939–3953.
Zou, Q.-H., Zhu, C.-Z., Yang, Y., Zuo, X.-N., Long, X.-Y., Cao, Q.-J., Wang, Y.-F.,
and Zang, Y.-F. (2008), “An improved approach to detection of amplitude of lowfrequency fluctuation (ALFF) for resting-state fMRI: fractional ALFF.” Journal
of neuroscience methods, 172, 137–141.

90

Biography
Francesca Petralia was born in Vigevano, Italy on July 5, 1983. She graduated with
honors from the University of Pavia with a Bachelor of Science in Economics in June
2006. From the same university she earned her Master of Science in Finance in June
2008. She then joined the Department of Statistical Science at Duke University to
attend the Ph.D. program. In May 2012 she earned a Master of Science in Statistics.

91

