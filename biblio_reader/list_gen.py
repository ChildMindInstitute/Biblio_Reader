import random, collections, os, csv, ast
import pandas as pd

with open('../inputs/FCP_DATA.csv', 'r') as f, open('../outputs/paragraphs.txt', 'r') as p:
    data = pd.read_csv(f)
    paragraphs = ast.literal_eval(p.read())


def checker_directory(directory):
    checks = {}
    for check in os.listdir(directory):
        full_path = '/'.join([directory, check])
        with open(full_path, 'r') as f:
            reader = list(csv.reader(f))
            for rows in reader[1:]:
                k = int(rows[0])
                v = rows[1].replace(' and ', '').upper()
                if k not in checks:
                    checks[k] = [v]
                else:
                    checks[k].append(v)
    return checks


assign = list(data['i'])
checker = checker_directory('../inputs/Article_Checks')
double_checked = {key: check for key, check in checker.items() if len(check) > 1}
new_assign = [article for article in assign if article not in double_checked.keys()]


class Member(object):
    def __init__(self, name):
        self.name = name
        self.path = '../outputs/Assignments/' + name + '.txt'
        if os.path.exists(self.path):
            file = open(self.path)
            for i, line in enumerate(file):
                if i == 3:
                    self.articles = sorted([int(l) for l in str(line).strip().split(',')])
                    break
        else:
            self.articles = []

    def __str__(self):
        return self.name + '\n\n\n' + ','.join([str(article) for article in self.articles]) + '\n\n\n' + \
           '\n\n'.join(['ARTICLE NO ' + str(key) + ': ' + str(data.iloc[key]['Title']) +
                        '\n' + str(data.iloc[key]['Authors']) + '\n\n' + '\n\n'.join(paragraph)
                        for key, paragraph in sorted(paragraphs.items()) if key in self.articles])

    def assign(self, assign, length):
        while length > 0:
            assignment = random.choice(assign)
            if assignment not in self.articles:
                self.articles.append(assignment)
                assign.remove(assignment)
                print(len(assign))
                length -= 1





class Assignment(object):
    def __init__(self, members):
        self.members = [Member(member) for member in members]

    def assign(self, assignment, length=None):
        if length is None:
            length = len(assignment)
        length /= len(self.members)
        for member in self.members:
            member.assign(assignment, length)

    def write(self, new=None):
        for member in self.members:
            if new:
                with open(member.path.replace('.txt', '') + new + '.txt', 'w') as f:
                    f.write(str(member))
            else:
                with open(member.path, 'w') as f:
                    f.write(str(member))

    def reassign(self, assign):
        for member in self.members:
            others = [mem for mem in self.members if mem != member]
            for other in others:
                member_length = 58
                while member_length > 0:
                    if any(i in other.articles for i in assign):
                        assignment = random.choice(other.articles)
                        if assignment in assign:
                            member.articles.append(assignment)
                            assign.remove(assignment)
                            member_length -= 1
                    else:
                        break

    def test(self):
        all_articles = []
        for member in self.members:
            all_articles += member.articles
        test_list = [item for item, count in collections.Counter(all_articles).items() if count < 2]
        for member in self.members:
            while len(member.articles) < 624:
                assignment = random.choice(test_list)
                if assignment in assign and assignment not in member.articles:
                    member.articles.append(assignment)
                    assign.remove(assignment)
                    test_list.remove(assignment)
            print([item for item, count in collections.Counter(member.articles).items() if count > 1])


assignment = Assignment(['michael', 'jon', 'helen', 'bonhwang', 'anirudh'])
assignment.reassign(new_assign)
assignment.test()

michael = [507,1335,803,1269,855,200,355,155,403,99,964,891,452,1376,1411,370,426,866,900,474,1206,70,251,1521,1059,1337,1005,311,581,1002,883,1470,1522,916,908,544,1459,342,1442,712,1268,1313,812,673,194,1001,713,1329,1435,244,1342,1157,103,666,1292,192,162,283,861,274,123,767,1114,690,416,902,970,639,486,1044,1465,1437,621,23,493,752,1213,1474,104,63,2,656,129,674,248,1496,65,1195,1391,743,330,383,910,476,1022,777,624,253,1192,172,641,1029,901,1204,519,526,1167,1267,828,1403,850,755,590,893,1132,158,655,1099,488,1379,130,1310,835,132,632,775,545,1148,949,60,1407,191,1214,1006,1455,418,1201,823,1111,1523,499,441,464,1086,1456,668,115,988,634,1064,1164,1466,270,715,764,602,565,1441,963,1497,809,1316,706,439,1491,710,919,1320,1210,554,966,609,772,279,152,1274,221,1298,1045,275,372,1015,667,553,1095,430,1325,157,16,1447,723,946,26,1446,396,324,1471,700,288,261,804,1281,1212,676,756,851,481,395,1048,1303,657,1345,874,195,306,1226,753,75,177,1054,640,868,750,1394,606,1019,829,503,462,1104,1258,604,760,1116,818,798,1312,94,299,1365,821,284,807,598,296,277,205,428,1539,1043,185,846,20,560,1169,1207,417,353,1007,1531,644,187,858,1055,384,589,1223,442,449,671,583,577,899,190,1240,550,805,1177,1105,110,229,945,627,1280,315,884,367,1336,929,1367,849,990,491,605,1241,1400,779,1552,1082,465,1331,703,1069,291,741,206,387,876,629,1070,841,934,1012,167,904,923,236,1096,669,739,857,612,1271,1382,1143,161,1462,1150,769,505,600,1395,981,1498,32,210,1485,175,763,335,290,1230,1381,562,354,250,614,721,1073,494,770,525,1253,714,1512,1290,1205,1451,1423,790,1554,1495,854,80,682,29,49,744,789,1359,683,701,878,1525,246,423,947,1032,1419,725,308,240,217,184,1430,1489,607,630,1175,232,69,446]
anirudh = [625,1016,1173,1139,138,595,1461,628,689,892,1492,1371,679,398,650,608,1159,280,670,213,1490,643,1294,102,781,394,166,740,905,997,259,705,1499,1340,563,1000,693,869,1333,218,1462,360,390,799,925,295,831,913,1444,1549,1238,1323,143,1438,1529,1096,732,1037,122,692,784,1487,745,1481,443,365,960,362,515,1511,698,1023,1033,661,154,492,1427,981,389,695,21,684,214,704,1053,302,1482,91,80,1147,969,501,1008,894,1326,210,246,1308,936,619,1296,914,1395,722,236,1473,734,1285,375,1035,1526,787,1188,1390,134,1121,423,419,1358,948,848,765,511,84,613,1408,580,568,1101,326,128,556,617,402,1356,530,1190,440,133,433,1484,435,1160,209,9,131,1352,1126,1542,933,588,239,591,1244,669,112,1402,702,618,183,1423,567,144,660,1436,457,909,161,1489,510,1136,472,1397,972,815,93,748,409,642,1510,813,28,1133,182,1196,1428,785,878,1128,266,415,871,522,1538,479,926,1253,1012,180,297,41,927,514,1245,135,471,336,231,508,1276,543,677,502,1477,369,227,1369,1249,520,532,716,1061,870,665,489,44,255,853,1265,585,1135,1493,623,327,1027,1255,959,1079,437,1103,538,410,273,833,648,1073,1330,1283,952,939,974,1151,711,467,141,1306,1533,859,795,1083,879,601,730,478,96,68,1200,351,484,188,39,1125,1347,216,1421,877,1047,260,1469,1270,1236,247,198,1122,578,163,1357,691,240,148,392,307,1290,975,1307,1543,930,742,1506,923,592,548,587,1134,165,865,1318,8,637,989,13,1263,993,1431,918,1124,1327,516,469,1113,1148,1118,822,898,125,269,1242,249,1311,1286,153,70,547,60,1342,1069,384,1039,1479,749,675,1471,1389,872,126,230,662,71,1246,540,378,573,349,990,951,944,1443,920,325,814,262,1516,946,1119,1264,110,808,1220,1440,1223,130,253,596,1520,1406,937,1193,576,1127,646,284,412,1130,1054,1131,561,1,341,738,129,1355,346]
bonhwang = [0,4,5,6,7,10,15,17,22,27,30,36,37,45,46,47,48,53,429,983,987,321,1508,758,61,316,1439,1409,350,202,761,98,169,1154,1131,769,1142,160,1205,1532,1381,954,373,1248,727,19,1527,1513,886,766,446,344,662,903,1524,682,1536,1155,1485,1149,917,339,1166,782,1413,1505,921,1301,788,1088,345,308,1009,1476,852,175,839,1107,1548,1349,873,1401,447,616,1547,1112,1425,944,957,1057,425,1309,359,318,633,709,1078,536,1457,386,1090,124,1451,528,434,771,737,249,811,262,1144,349,1360,751,348,469,1279,967,1388,800,454,1129,1004,1516,458,114,854,832,1102,106,225,1286,937,405,256,1084,235,928,186,159,40,1545,882,323,424,347,1387,1478,1198,233,1514,100,897,164,287,228,620,593,1052,1026,759,1031,935,105,1544,658,993,862,1014,594,570,631,938,1498,113,88,1109,576,179,31,1355,57,574,942,535,1420,856,303,32,549,1181,1341,71,422,1261,1194,220,652,340,1507,331,612,1224,754,226,1247,1559,25,223,840,719,1378,1483,1025,924,906,241,721,1182,956,1468,1277,33,1032,1382,1178,50,1520,1049,86,995,1187,1250,151,534,1375,1534,281,547,377,66,1040,1158,864,1463,836,1056,896,509,965,97,72,1339,334,276,1153,895,1453,1535,498,483,615,810,3,681,885,222,278,999,1322,757,531,1010,845,254,561,1039,378,614,451,49,635,83,675,843,361,596,540,243,461,525,1193,232,1278,1443,58,863,1480,1512,120,1018,1074,1314,564,579,1189,393,453,43,947,482,793,571,251,487,68,379,1173,858,1083,1200,416,484,792,146,1019,1324,134,969,479,521,1152,1511,1145,1332,849,329,1053,265,1128,291,81,606,107,1192,1345,1496,753,119,960,851,383,627,420,1103,1306,835,526,828,834,880,1317,311,659,198,945,1518,493,460,140,1210,1540,1481,894,181,221,558,1117,859,998,1329,1034,195,1470,655,557,392,142,730,565,728,821]
helen = [1410,659,984,931,116,153,1344,487,42,739,1124,54,517,121,1191,802,379,603,421,199,747,366,1165,1232,156,126,354,1180,551,1431,1414,599,1328,317,714,1257,29,1361,111,117,1162,958,1530,778,1021,312,319,38,664,325,1051,1460,572,82,1541,1405,460,1297,142,1174,294,773,566,145,1145,1354,834,1092,1076,1327,720,790,1445,78,521,450,1430,1264,1454,11,1302,875,404,438,1434,51,184,485,1338,529,562,1359,546,1429,337,651,125,630,783,217,738,1,797,1416,978,371,516,1034,250,1554,322,267,1175,207,683,1197,649,1252,672,1259,1138,1300,582,1231,69,982,1140,420,257,269,119,300,611,569,470,497,109,329,991,448,1555,1091,1452,391,85,806,87,824,951,867,64,814,1273,1291,230,265,89,880,1127,380,477,898,268,463,139,1003,1220,1540,1424,847,1143,1440,77,1108,762,92,1246,1479,181,724,445,258,101,857,808,238,107,559,717,992,918,726,718,252,687,173,333,1080,1118,1495,505,388,1509,573,1242,140,412,694,586,746,744,539,994,770,189,146,678,1230,356,1317,1288,1254,1350,224,1228,915,890,1036,943,401,1161,397,1041,376,1550,290,264,789,1515,352,1389,1525,95,647,411,1062,920,506,1119,887,35,645,368,1311,986,542,1184,1324,1067,626,1256,786,729,1063,912,860,1519,1216,149,1262,822,872,1150,242,728,1528,67,1066,1282,346,680,513,174,1028,79,1251,310,81,55,1217,725,1518,1551,801,537,600,1295,708,234,1486,381,203,219,697,1271,979,14,167,298,468,335,827,1357,785,1247,595,418,575,1043,375,692,1362,1258,132,1027,594,26,436,752,589,410,243,345,673,832,1109,424,428,275,435,1507,316,1198,1333,241,952,554,1473,812,983,472,1268,430,1463,631,1337,666,254,1177,1125,141,939,853,1082,120,296,1375,520,1238,1510,202,548,340,601,465,155,396,1207,620,417,20,736,299,1310,840,273,934,1313,459,182,1388,638]
jon = [1011,1071,1075,1077,1094,1098,1100,1171,1199,1243,1260,1272,1284,1304,1343,1368,1433,1448,1450,1464,1517,1557,201,24,245,314,332,357,363,473,496,555,654,73,76,774,996,18,34,52,59,108,118,127,136,137,147,150,168,171,196,197,204,208,215,237,263,272,282,289,292,301,304,309,328,338,343,358,364,374,385,400,406,407,408,413,427,432,455,475,490,495,500,518,524,527,533,541,653,663,685,686,696,731,735,768,780,794,796,817,825,830,838,842,844,881,888,889,907,922,932,941,950,953,961,962,971,976,977,980,1013,1017,1020,1038,1042,1050,1060,1065,1068,1072,1081,1085,1089,1093,1106,1115,1123,1146,1156,1168,1170,1172,1176,1179,1183,1185,1186,1202,1203,1209,1211,1215,1218,1219,1221,1222,1225,1227,1229,1233,1234,1235,1237,1239,1266,1289,1293,1299,1305,1319,1321,1348,1351,1353,1363,1366,1370,1372,1373,1374,1377,1380,1383,1384,1385,1386,1392,1393,1398,1399,1404,1412,1415,1418,1422,1426,1432,1449,1467,1472,1475,1488,1494,1500,1501,1503,1504,1537,1546,1553,1556,1558,504,193,1208,1396,305,285,178,1152,211,701,968,940,1120,1130,985,1030,733,320,837,1137,1334,607,459,763,998,170,597,1417,816,1458,56,1141,636,1364,436,1024,1346,341,1046,707,1087,494,74,176,1110,776,512,1362,820,557,414,1406,1275,584,523,904,12,791,466,622,480,1097,431,973,558,1287,819,444,826,792,1419,382,1332,313,688,1502,90,638,286,62,293,1163,571,456,699,575,736,1113,646,1117,1058,212,955,552,749,911,271,399,1315,610,1188,1536,63,1003,390,1547,619,216,982,1169,583,1033,897,415,214,483,327,712,1551,1074,1159,409,268,994,114,1052,476,779,1308,1436,1151,564,94,536,824,1394,687,172,585,766,306,205,326,1477,1092,1318,1049,1391,1335,267,809,598,698,186,1174,1212,16,694,28,1254,919,1340,1437,717,745,845,1493,1283,649,1376,871,891,115,1491,1460,280,715,1344,892,1276]

assignment.members[4].articles = [article for article in assignment.members[4].articles if article not in anirudh]
assignment.members[0].articles = [article for article in assignment.members[4].articles if article not in michael]
assignment.members[1].articles = [article for article in assignment.members[4].articles if article not in jon]
assignment.members[2].articles = [article for article in assignment.members[4].articles if article not in helen]
assignment.members[3].articles = [article for article in assignment.members[4].articles if article not in bonhwang]

assignment.write(new='_new')

